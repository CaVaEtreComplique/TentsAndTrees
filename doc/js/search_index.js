var search_data = {"index":{"searchIndex":["adventurelevel","alltreeshavetentshelper","asset","button","cell","cellasset","cellassets","celldonttouchtreehelper","cellisagrass","celltouchatenthelper","cellui","cellwhiteoverlap","choixdiff","chronoui","click","clueui","compressegrid","connectdb","connexion","constants","count","diapo","difficulty","fenetreprinc","fictivhelper","findwhitezone","game","gamedecorated","gamescreen","gamemode","grid","gridgenerator","gridui","guess","guessui","help","helpallgrassonacolumn","helpallgrassonarow","helpallpossibilitiesgiveitcolumn","helpallpossibilitiesgiveitrow","helpalltentsonacolumn","helpalltentsonarow","helpcelltoofaroftrees","helpcellsandcolumns","helpcellsandrows","helpcellsandrowsorcolumns","helpnotfound","helpon1cell","helpon2cells","helpon3cells","helponacelltouchatent","helponacolumn","helponcells","helponrowsandcolumn","helponerow","helpui","helper","helpson2celltentuniquesolution","helpson2cellsgrasslinkedtree","helpsonacellistentbecauseoftree","helpsonacelloverlap","highscore","highscoresscreen","levelnumber","levels","listesave","loadingscreen","modedejeu","motdepasseoublie","moves","object","parametre","pausescreen","player","probleme","problemeident","processstatus","quickplaysession","rowsandcolumnsfindgrass","rowsandcolumnsfindtent","rowsandcolumnsgrasshelper","rowsandcolumnstentshelper","save","saveblock","savecontent","savedb","screen","scrollablearea","selectionui","session","star","testgame","text","timeattacksession","tutorialgamescreen","tutorialsession","uimanager","victoryscreen","xmlreader","==()","==()","==()","==()","==()","==()","==()","==()","find()","activatehelp()","add()","add()","add()","addmove()","addmove()","apply()","applyasset()","applyon()","applyon()","applyon()","begindrag()","beginguess()","birotative?()","buttonmaxstring()","calculateoverallstars()","calculatescore()","calculatescore()","calculatescore()","calculatescore()","calculatescore()","calculatescore()","calculatestars()","cellasset()","cellassetglowing()","cellassetselected()","cellat()","cellat()","cellat()","cellsfromfirsttoend()","cellslist()","cellslist()","cellslist()","cellslist()","cellslist()","cellslist()","cellslist()","cellslist()","cellslist()","clean()","clearredo()","clickdefined?()","colorchange()","compresse()","connexion()","continuable?()","continuable?()","continuable?()","continuable?()","coords()","copyfrozen()","corecell()","corecellat()","count()","count()","createnewsave()","createplayer()","createsave()","deleteplayer()","deleteplayerhg()","deleteplayersave()","deletesave()","deletesave()","destroy()","dragleftchange()","dragleftclicked()","dragable?()","draged?()","each()","findfirst()","frozenof()","getbuttonlabel()","getgamemodes()","gethelpstexts()","gethighscoresbygamemodediff()","getimage()","getjoueur()","getlevel()","getlevelmaxstars()","getloadingmessages()","getplayer()","getplayerssave()","getres()","getsavebyid()","getscreentexts()","gettext()","gettext()","gettext()","gettext()","gettext()","gettext()","gettext()","gettext()","gettext()","gettext()","gettext()","gettext()","gettext()","gettext()","getvictoryscreen()","glowing()","gotonextstape()","gridaltered()","gridaltered()","help()","help()","help()","help()","help()","help()","help()","help()","help()","help()","help()","help()","helpdisplayed?()","helpdisplayed?()","helpfound?()","helpfound?()","helplevelmanagement()","helpslevelslimits()","hide()","hover()","initgtkgrid()","isagrass?()","isatent?()","isatree?()","isawhite?()","isplayerexist()","leftclicked()","leftclicked()","leftclickeddraged()","load()","load()","lvlavailable?()","moves()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","next()","normal()","nuimage()","onclick()","onclick()","onconfigureeventsignal()","ondestroy()","ondestroy()","ondrawsignal()","outofbound()","parce()","partofadventure?()","playerconnect()","playerupdate()","price()","price()","primarychange()","primaryunchange()","reallast()","recive()","recive()","redo()","redo()","redo()","redo()","refresh()","removeguess()","replay()","replay()","require_all()","research()","resetgrid()","resize()","resize()","root?()","run()","run()","run()","rungamesession()","rungamesessionfromsave()","samestate?()","save()","select()","select()","selection()","send()","sethelponclick()","setsave()","settime()","settime()","settime()","settime()","settime()","show()","show()","show()","text()","title()","to_s()","tooglecountindicators()","toogletracer()","traceractive?()","unleftclicked()","undo()","undo()","undo()","undo()","unselect()","unselect()","update()","update()","update()","update()","update()","update()","update()","updatelabel()","updatelabel()","updatelabel()","updatesave()","updatesave()","updatesave()","fichierdegrilles","xmldoc.xml","readme"],"longSearchIndex":["adventurelevel","alltreeshavetentshelper","asset","button","cell","cellasset","cellassets","celldonttouchtreehelper","cellisagrass","celltouchatenthelper","cellui","cellwhiteoverlap","choixdiff","chronoui","click","clueui","compressegrid","connectdb","connexion","constants","count","diapo","difficulty","fenetreprinc","fictivhelper","findwhitezone","game","gamedecorated","gamescreen","gamemode","grid","gridgenerator","gridui","guess","guessui","help","helpallgrassonacolumn","helpallgrassonarow","helpallpossibilitiesgiveitcolumn","helpallpossibilitiesgiveitrow","helpalltentsonacolumn","helpalltentsonarow","helpcelltoofaroftrees","helpcellsandcolumns","helpcellsandrows","helpcellsandrowsorcolumns","helpnotfound","helpon1cell","helpon2cells","helpon3cells","helponacelltouchatent","helponacolumn","helponcells","helponrowsandcolumn","helponerow","helpui","helper","helpson2celltentuniquesolution","helpson2cellsgrasslinkedtree","helpsonacellistentbecauseoftree","helpsonacelloverlap","highscore","highscoresscreen","levelnumber","levels","listesave","loadingscreen","modedejeu","motdepasseoublie","moves","object","parametre","pausescreen","player","probleme","problemeident","processstatus","quickplaysession","rowsandcolumnsfindgrass","rowsandcolumnsfindtent","rowsandcolumnsgrasshelper","rowsandcolumnstentshelper","save","saveblock","savecontent","savedb","screen","scrollablearea","selectionui","session","star","testgame","text","timeattacksession","tutorialgamescreen","tutorialsession","uimanager","victoryscreen","xmlreader","cell#==()","grid#==()","help#==()","helpcellsandrowsorcolumns#==()","helpon2cells#==()","helpon3cells#==()","helponcells#==()","helponrowsandcolumn#==()","findwhitezone::find()","clueui#activatehelp()","moves#add()","processstatus::add()","scrollablearea#add()","game#addmove()","guess#addmove()","text#apply()","cellui#applyasset()","asset#applyon()","screen#applyon()","victoryscreen#applyon()","gridui#begindrag()","game#beginguess()","cell#birotative?()","xmlreader#buttonmaxstring()","adventurelevel#calculateoverallstars()","adventurelevel#calculatescore()","game#calculatescore()","quickplaysession#calculatescore()","session#calculatescore()","timeattacksession#calculatescore()","tutorialsession#calculatescore()","adventurelevel#calculatestars()","cellassets#cellasset()","cellassets#cellassetglowing()","cellassets#cellassetselected()","game#cellat()","grid#cellat()","guess#cellat()","gridui#cellsfromfirsttoend()","help#cellslist()","helpcellsandcolumns#cellslist()","helpcellsandrows#cellslist()","helpcellsandrowsorcolumns#cellslist()","helpon2cells#cellslist()","helpon3cells#cellslist()","helponacolumn#cellslist()","helponcells#cellslist()","helponerow#cellslist()","helpui#clean()","moves#clearredo()","gridui#clickdefined?()","text#colorchange()","compressegrid::compresse()","connexion::connexion()","adventurelevel#continuable?()","session#continuable?()","timeattacksession#continuable?()","tutorialsession#continuable?()","cellui#coords()","grid#copyfrozen()","cellui#corecell()","gridui#corecellat()","clueui#count()","count::count()","uimanager#createnewsave()","connectdb#createplayer()","session#createsave()","connectdb#deleteplayer()","connectdb#deleteplayerhg()","connectdb#deleteplayersave()","connectdb#deletesave()","session#deletesave()","save#destroy()","cell#dragleftchange()","cellui#dragleftclicked()","cellui#dragable?()","gridui#draged?()","grid#each()","count::findfirst()","cell#frozenof()","xmlreader#getbuttonlabel()","connectdb#getgamemodes()","xmlreader#gethelpstexts()","connectdb#gethighscoresbygamemodediff()","diapo#getimage()","connexion::getjoueur()","levels#getlevel()","levels#getlevelmaxstars()","xmlreader#getloadingmessages()","connectdb#getplayer()","connectdb#getplayerssave()","help#getres()","connectdb#getsavebyid()","xmlreader#getscreentexts()","help#gettext()","helpallgrassonacolumn#gettext()","helpallgrassonarow#gettext()","helpallpossibilitiesgiveitcolumn#gettext()","helpallpossibilitiesgiveitrow#gettext()","helpalltentsonacolumn#gettext()","helpalltentsonarow#gettext()","helpcelltoofaroftrees#gettext()","helpnotfound#gettext()","helponacelltouchatent#gettext()","helpson2celltentuniquesolution#gettext()","helpson2cellsgrasslinkedtree#gettext()","helpsonacellistentbecauseoftree#gettext()","helpsonacelloverlap#gettext()","uimanager#getvictoryscreen()","cellui#glowing()","tutorialgamescreen#gotonextstape()","gamescreen#gridaltered()","tutorialgamescreen#gridaltered()","alltreeshavetentshelper#help()","celldonttouchtreehelper#help()","cellisagrass#help()","celltouchatenthelper#help()","cellwhiteoverlap#help()","fictivhelper#help()","game#help()","helper#help()","rowsandcolumnsfindgrass#help()","rowsandcolumnsfindtent#help()","rowsandcolumnsgrasshelper#help()","rowsandcolumnstentshelper#help()","gamescreen#helpdisplayed?()","tutorialgamescreen#helpdisplayed?()","help#helpfound?()","helpnotfound#helpfound?()","helper#helplevelmanagement()","helper#helpslevelslimits()","testgame::hide()","gridui#hover()","gridui#initgtkgrid()","cell#isagrass?()","cell#isatent?()","cell#isatree?()","cell#isawhite?()","connectdb#isplayerexist()","cellui#leftclicked()","gridui#leftclicked()","gridui#leftclickeddraged()","save::load()","save#load()","levels#lvlavailable?()","guess#moves()","adventurelevel::new()","button::new()","cell::new()","cellasset::new()","cellassets::new()","cellui::new()","chronoui::new()","clueui::new()","connectdb::new()","connexion::new()","diapo::new()","difficulty::new()","game::new()","gamedecorated::new()","gamescreen::new()","gamemode::new()","grid::new()","gridgenerator::new()","gridui::new()","guess::new()","help::new()","helpallgrassonacolumn::new()","helpallgrassonacolumn::new()","helpallgrassonarow::new()","helpallgrassonarow::new()","helpallpossibilitiesgiveitcolumn::new()","helpallpossibilitiesgiveitrow::new()","helpalltentsonacolumn::new()","helpalltentsonacolumn::new()","helpalltentsonarow::new()","helpalltentsonarow::new()","helpcelltoofaroftrees::new()","helpcellsandcolumns::new()","helpcellsandrows::new()","helpcellsandrowsorcolumns::new()","helpnotfound::new()","helpnotfound::new()","helpon2cells::new()","helpon3cells::new()","helponacelltouchatent::new()","helponacelltouchatent::new()","helponacolumn::new()","helponcells::new()","helponrowsandcolumn::new()","helponerow::new()","helpui::new()","helper::new()","helpson2celltentuniquesolution::new()","helpson2celltentuniquesolution::new()","helpson2cellsgrasslinkedtree::new()","helpsonacellistentbecauseoftree::new()","helpsonacellistentbecauseoftree::new()","helpsonacelloverlap::new()","helpsonacelloverlap::new()","highscore::new()","levelnumber::new()","levels::new()","listesave::new()","loadingscreen::new()","motdepasseoublie::new()","moves::new()","pausescreen::new()","player::new()","probleme::new()","problemeident::new()","processstatus::new()","quickplaysession::new()","save::new()","saveblock::new()","savecontent::new()","savedb::new()","screen::new()","scrollablearea::new()","selectionui::new()","session::new()","star::new()","testgame::new()","text::new()","timeattacksession::new()","tutorialgamescreen::new()","tutorialsession::new()","uimanager::new()","victoryscreen::new()","xmlreader::new()","guess#next()","cellui#normal()","diapo#nuimage()","button#onclick()","text#onclick()","helpui#onconfigureeventsignal()","probleme#ondestroy()","problemeident#ondestroy()","helpui#ondrawsignal()","cellui#outofbound()","chronoui#parce()","session#partofadventure?()","connectdb#playerconnect()","connectdb#playerupdate()","help#price()","helper#price()","cell#primarychange()","cell#primaryunchange()","gridui#reallast()","loadingscreen#recive()","processstatus#recive()","game#redo()","gridui#redo()","guess#redo()","moves#redo()","gridui#refresh()","game#removeguess()","moves#replay()","session#replay()","object#require_all()","alltreeshavetentshelper#research()","game#resetgrid()","asset#resize()","cellasset#resize()","guess#root?()","game#run()","loadingscreen#run()","uimanager#run()","uimanager#rungamesession()","uimanager#rungamesessionfromsave()","cellui#samestate?()","connectdb#save()","cellui#select()","selectionui#select()","gridui#selection()","processstatus::send()","tutorialgamescreen#sethelponclick()","session#setsave()","adventurelevel#settime()","quickplaysession#settime()","session#settime()","timeattacksession#settime()","tutorialsession#settime()","cellui#show()","connexion::show()","selectionui#show()","loadingscreen#text()","text#title()","help#to_s()","gridui#tooglecountindicators()","gridui#toogletracer()","gridui#traceractive?()","cellui#unleftclicked()","game#undo()","gridui#undo()","guess#undo()","moves#undo()","cellui#unselect()","selectionui#unselect()","clueui#update()","gamescreen#update()","helpui#update()","save::update()","selectionui#update()","tutorialgamescreen#update()","uimanager#update()","button#updatelabel()","chronoui#updatelabel()","text#updatelabel()","connectdb#updatesave()","session#updatesave()","uimanager#updatesave()","","",""],"info":[["AdventureLevel","","AdventureLevel.html","",""],["AllTreesHaveTentsHelper","","AllTreesHaveTentsHelper.html","",""],["Asset","","Asset.html","","<p>Asset is an abstract class needed to create and use all of the images from\nthe game. It creates these …\n"],["Button","","Button.html","","<p>The Button class implements how every button in the game should work. This\nclass has 3 methods : initialize, …\n"],["Cell","","Cell.html","","<p>Presentation\n<p>The Cell class is the core class of every cell in the game.\n<p>Variables\n"],["CellAsset","","CellAsset.html","",""],["CellAssets","","CellAssets.html","",""],["CellDontTouchTreeHelper","","CellDontTouchTreeHelper.html","",""],["CellIsAGrass","","CellIsAGrass.html","",""],["CellTouchATentHelper","","CellTouchATentHelper.html","",""],["CellUi","","CellUi.html","",""],["CellWhiteOverlap","","CellWhiteOverlap.html","",""],["ChoixDiff","","ChoixDiff.html","","<p>Presentation\n<p>ChoixDiff is an inherited class from the Screen class. This class only\nneeds to be initialized …\n"],["ChronoUi","","ChronoUi.html","","<p>Presentation\n<p>The ChronoUI class is inherited from the Button class and manages the\nin-game chronometer. …\n"],["Click","","Click.html","","<p>@Author: Corentin Petit &lt;CorentinPetit&gt; @Date:   08-Feb-2019 @Email: \ncorentin.petit.etu@univ-lemans.fr …\n"],["ClueUi","","ClueUi.html","",""],["CompresseGrid","","CompresseGrid.html","","<p>Decompresse the grid into 4 arrays whitch contain tent, tree, grass and\nwhite\n"],["ConnectDB","","ConnectDB.html","",""],["Connexion","","Connexion.html","",""],["Constants","","Constants.html","","<p>@Author: Corentin Petit &lt;CorentinPetit&gt; @Date:   08-Feb-2019 @Email: \ncorentin.petit.etu@univ-lemans.fr …\n"],["Count","","Count.html","","<p>count the cells whith the State state in the row or column rank in the Game\ngame, verticaly (VertHor …\n"],["Diapo","","Diapo.html","",""],["Difficulty","","Difficulty.html","","<p>A Difficulty is defined by its ID and its name. This Class is here to\nrepresent a difficulty in the database. …\n"],["FenetrePrinc","","FenetrePrinc.html","","<p>Presentation\n<p>FenetrePrinc is an inherited class from the Screen class. This class only\nneeds to be initialized …\n"],["FictivHelper","","FictivHelper.html","","<p>An abstract class whitch define what&#39;s a Halper\n"],["FindWhiteZone","","FindWhiteZone.html","","<p>Find white block in column/row which follow each other, create an array who\ncontain those block\n"],["Game","","Game.html","",""],["GameDecorated","","GameDecorated.html","",""],["GameScreen","","GameScreen.html","",""],["Gamemode","","Gamemode.html","","<p>A Gamemode is defined by its ID and its name.  This is here to represent a\nGamemode in the database\n"],["Grid","","Grid.html","","<p>Presentation\n<p>The Grid class is the core of all the grids in the game.\n<p>Variables\n"],["GridGenerator","","GridGenerator.html","","<p>@Author: Corentin Petit &lt;CorentinPetit&gt; @Date:   09-Feb-2019 @Email: \ncorentin.petit.etu@univ-lemans.fr …\n"],["GridUi","","GridUi.html","",""],["Guess","","Guess.html","",""],["GuessUi","","GuessUi.html","",""],["Help","","Help.html","","<p>The help class is an abstract class. It is the general parent of all the\nother help classes in the game. …\n"],["HelpAllGrassOnAColumn","","HelpAllGrassOnAColumn.html","","<p>Help witch fill with tent a column who only need tents\n"],["HelpAllGrassOnARow","","HelpAllGrassOnARow.html","",""],["HelpAllPossibilitiesGiveItColumn","","HelpAllPossibilitiesGiveItColumn.html","","<p>The HelpAllPossibilitiesGiveItColumn class is inherited from the\nHelpCellsAndColumns class and helps …\n"],["HelpAllPossibilitiesGiveItRow","","HelpAllPossibilitiesGiveItRow.html","","<p>The HelpAllPossibilitiesGiveItRow class is inherited from the\nHelpCellsAndRows class and helps when all …\n"],["HelpAllTentsOnAColumn","","HelpAllTentsOnAColumn.html","","<p>Help witch fill with grass a column who have all it&#39;s tents\n"],["HelpAllTentsOnARow","","HelpAllTentsOnARow.html","",""],["HelpCellTooFarOfTrees","","HelpCellTooFarOfTrees.html","","<p>Presentation\n<p>The HelpCellTooFarOfTrees class is inherited from the HelpOn1Cell class.\nThis class is used …\n"],["HelpCellsAndColumns","","HelpCellsAndColumns.html","","<p>The HelpCellsAndColumns class is an abstract class inherited from the\nabstract class HelpCellsAndRowsOrColumns …\n"],["HelpCellsAndRows","","HelpCellsAndRows.html","","<p>The HelpCellsAndRows class is an abstract class inherited from the abstract\nclass HelpCellsAndRowsOrColumns …\n"],["HelpCellsAndRowsOrColumns","","HelpCellsAndRowsOrColumns.html","","<p>The HelpCellsAndRowsOrColumns is an abstract class inherited from the Help\nclass and it will lead all …\n"],["HelpNotFound","","HelpNotFound.html","","<p>The HelpNotFound class is inherited from the Help class. This class is\ninstanciated when no help can …\n"],["HelpOn1Cell","","HelpOn1Cell.html","","<p>Presentation\n<p>The HelpOn1Cell class is inherited from the HelpOnCells class and its only\ndirect child is …\n"],["HelpOn2Cells","","HelpOn2Cells.html","","<p>Presentation\n<p>The HelpOn2Cells class is an abstract class inherited from HelpOnCells. Its\ndirect children …\n"],["HelpOn3Cells","","HelpOn3Cells.html","",""],["HelpOnACellTouchATent","","HelpOnACellTouchATent.html","",""],["HelpOnAColumn","","HelpOnAColumn.html","",""],["HelpOnCells","","HelpOnCells.html","","<p>Presentation\n<p>The HelpOnCells class is inherited from the Help class and its direct\nchildren are HelpOn1Cell …\n"],["HelpOnRowsAndColumn","","HelpOnRowsAndColumn.html","",""],["HelpOneRow","","HelpOneRow.html","",""],["HelpUi","","HelpUi.html","","<p>@Author: Corentin Petit &lt;zeigon&gt; @Date:   18-Mar-2019 @Email: \ncorentin.petit.etu@univ-lemans.fr …\n"],["Helper","","Helper.html","",""],["HelpsOn2CellTentUniqueSolution","","HelpsOn2CellTentUniqueSolution.html","",""],["HelpsOn2CellsGrassLinkedTree","","HelpsOn2CellsGrassLinkedTree.html","","<p>Presentation\n<p>The HelpsOn2CellsGrassLinkedTree class is inherited from the HelpOn2Cells\nabstract class. …\n"],["HelpsOnACellIsTentBecauseOfTree","","HelpsOnACellIsTentBecauseOfTree.html","",""],["HelpsOnACellOverlap","","HelpsOnACellOverlap.html","",""],["HighScore","","HighScore.html","","<p>A HighScore is defined by its difficulty, its Player, its score and its\ngamemode. This Class is here …\n"],["HighScoresScreen","","HighScoresScreen.html","",""],["LevelNumber","","LevelNumber.html","",""],["Levels","","Levels.html","",""],["ListeSave","","ListeSave.html","",""],["LoadingScreen","","LoadingScreen.html","",""],["ModeDeJeu","","ModeDeJeu.html","","<p>Presentation\n<p>ModeDeJeu is an inherited class from the Screen class. This class only\nneeds to be initialized …\n"],["MotdepasseOublie","","MotdepasseOublie.html","",""],["Moves","","Moves.html","","<p>This class manages all the moves within the game, epecially the undo/redo\nfunction. Its methods are undo, …\n"],["Object","","Object.html","",""],["Parametre","","Parametre.html","","<p>Presentation\n<p>Parametre is an inherited class from the Screen class. This class only\nneeds to be initialized …\n"],["PauseScreen","","PauseScreen.html","",""],["Player","","Player.html","","<p>A Player is defined by his ID, his name and his password. This Class is\nhere to represent a Player in …\n"],["Probleme","","Probleme.html","",""],["ProblemeIdent","","ProblemeIdent.html","",""],["ProcessStatus","","ProcessStatus.html","","<p>@Author: Corentin Petit &lt;CorentinPetit&gt; @Date:   09-Feb-2019 @Email: \ncorentin.petit.etu@univ-lemans.fr …\n"],["QuickPlaySession","","QuickPlaySession.html","",""],["RowsAndColumnsFindGrass","","RowsAndColumnsFindGrass.html","",""],["RowsAndColumnsFindTent","","RowsAndColumnsFindTent.html","",""],["RowsAndColumnsGrassHelper","","RowsAndColumnsGrassHelper.html","",""],["RowsAndColumnsTentsHelper","","RowsAndColumnsTentsHelper.html","",""],["Save","","Save.html","",""],["SaveBlock","","SaveBlock.html","",""],["SaveContent","","SaveContent.html","",""],["SaveDB","","SaveDB.html","","<p>A Save is defined by its ID, its Player, its date and its content. This\nClass is here to represent a …\n"],["Screen","","Screen.html","",""],["ScrollableArea","","ScrollableArea.html","",""],["SelectionUi","","SelectionUi.html","","<p>@Author: Corentin Petit &lt;CorentinPetit&gt; @Date:   08-Feb-2019 @Email: \ncorentin.petit.etu@univ-lemans.fr …\n"],["Session","","Session.html","","<p>@Author: Corentin Petit &lt;zeigon&gt; @Date:   01-Mar-2019 @Email: \ncorentin.petit.etu@univ-lemans.fr …\n"],["Star","","Star.html","",""],["TestGame","","TestGame.html","","<p>&gt; Main\n<p>&gt; Generation de la fenetre de jeu\n"],["Text","","Text.html","","<p>@Author: Corentin Petit &lt;CorentinPetit&gt; @Date:   10-Feb-2019 @Email: \ncorentin.petit.etu@univ-lemans.fr …\n"],["TimeAttackSession","","TimeAttackSession.html","",""],["TutorialGameScreen","","TutorialGameScreen.html","",""],["TutorialSession","","TutorialSession.html","",""],["UiManager","","UiManager.html","","<p>@Author: Corentin Petit &lt;zeigon&gt; @Date:   01-Mar-2019 @Email: \ncorentin.petit.etu@univ-lemans.fr …\n"],["VictoryScreen","","VictoryScreen.html","",""],["XmlReader","","XmlReader.html","","<p>Presentation\n<p>The XmlReader class is here to read every necessary information inside the\nXML file. The …\n"],["==","Cell","Cell.html#method-i-3D-3D","(otherCell)","<p>The == method is used to compare two cells, it returns true if the\ncells&#39; states are equal.\n<p>Parameter …\n"],["==","Grid","Grid.html#method-i-3D-3D","(otherGrid)","<p>The == boolean method compares two grids and returns true if the grids are\nequal.\n<p>Parameters\n<p><code>otherGrid</code> …\n"],["==","Help","Help.html#method-i-3D-3D","(otherHelp)","<p>This method is a redefinition of the == method.\n<p>Returns\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">return</span> (<span class=\"ruby-keyword\">self</span>.<span class=\"ruby-identifier\">class</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-identifier\">otherHelp</span>.<span class=\"ruby-identifier\">class</span>)\n</pre>\n"],["==","HelpCellsAndRowsOrColumns","HelpCellsAndRowsOrColumns.html#method-i-3D-3D","(otherHelp)","<p>This method is a redefinition of this method in the Help class.\n<p>Attributes\n<p><code>otherHelp</code> : The object we want …\n"],["==","HelpOn2Cells","HelpOn2Cells.html#method-i-3D-3D","(otherHelp)","<p>Presentation\n<p>The == method overrides the == method in HelpOnCells. It is here to compare\nthis object with …\n"],["==","HelpOn3Cells","HelpOn3Cells.html#method-i-3D-3D","(otherHelp)",""],["==","HelpOnCells","HelpOnCells.html#method-i-3D-3D","(otherHelp)","<p>This method compares this help with another one.\n<p>Parameters\n<p><code>otherHelp</code> : The help we want to compare the …\n"],["==","HelpOnRowsAndColumn","HelpOnRowsAndColumn.html#method-i-3D-3D","(otherHelp)",""],["Find","FindWhiteZone","FindWhiteZone.html#method-c-Find","(game, vertHor, rank)",""],["activateHelp","ClueUi","ClueUi.html#method-i-activateHelp","(bool)",""],["add","Moves","Moves.html#method-i-add","(move)","<p>Adds a move to the “moves” stack and clears redo stack.\n<p><strong>Arguments</strong> :\n<p><code>move</code> -&gt; the move to add. …\n"],["add","ProcessStatus","ProcessStatus.html#method-c-add","(o)",""],["add","ScrollableArea","ScrollableArea.html#method-i-add","(widget,pad=0)",""],["addmove","Game","Game.html#method-i-addmove","(move,triRotative=true)",""],["addmove","Guess","Guess.html#method-i-addmove","(move)",""],["apply","Text","Text.html#method-i-apply","()",""],["applyAsset","CellUi","CellUi.html#method-i-applyAsset","(asset)",""],["applyOn","Asset","Asset.html#method-i-applyOn","(widget)",""],["applyOn","Screen","Screen.html#method-i-applyOn","(widget)",""],["applyOn","VictoryScreen","VictoryScreen.html#method-i-applyOn","(widget,sScore,isWon)",""],["beginDrag","GridUi","GridUi.html#method-i-beginDrag","(cell, click)",""],["beginGuess","Game","Game.html#method-i-beginGuess","()",""],["biRotative?","Cell","Cell.html#method-i-biRotative-3F","()","<p>The biRotative? is an alias method to the isATree? method. It returns true\nif the cell&#39;s state is …\n"],["buttonMaxString","XmlReader","XmlReader.html#method-i-buttonMaxString","(currentScreen)","<p>The buttonMaxString method returns the length of the longest label of a\nbutton in a screen.\n"],["calculateOverallStars","AdventureLevel","AdventureLevel.html#method-i-calculateOverallStars","()",""],["calculateScore","AdventureLevel","AdventureLevel.html#method-i-calculateScore","()",""],["calculateScore","Game","Game.html#method-i-calculateScore","()",""],["calculateScore","QuickPlaySession","QuickPlaySession.html#method-i-calculateScore","()",""],["calculateScore","Session","Session.html#method-i-calculateScore","()",""],["calculateScore","TimeAttackSession","TimeAttackSession.html#method-i-calculateScore","()",""],["calculateScore","TutorialSession","TutorialSession.html#method-i-calculateScore","()",""],["calculateStars","AdventureLevel","AdventureLevel.html#method-i-calculateStars","()",""],["cellAsset","CellAssets","CellAssets.html#method-i-cellAsset","(state=:white,variation=-1,frozen=false)","<p>@buttons …\n"],["cellAssetGlowing","CellAssets","CellAssets.html#method-i-cellAssetGlowing","(state,variation=-1,frozen=false)",""],["cellAssetSelected","CellAssets","CellAssets.html#method-i-cellAssetSelected","(state,variation=-1,frozen=false)",""],["cellAt","Game","Game.html#method-i-cellAt","(row, col)",""],["cellAt","Grid","Grid.html#method-i-cellAt","(row, col)","<p>The cellAt method returns the cell with the coordinates taken in\nparameters.\n<p><code>row</code> - The row in which the …\n"],["cellAt","Guess","Guess.html#method-i-cellAt","(row, col)",""],["cellsFromFirstToEnd","GridUi","GridUi.html#method-i-cellsFromFirstToEnd","()",""],["cellsList","Help","Help.html#method-i-cellsList","(helpLevel)","<p>This method returns an array with all the important cells for the help.\n"],["cellsList","HelpCellsAndColumns","HelpCellsAndColumns.html#method-i-cellsList","(helpLevel)","<p>The cellsList method is a redefinition from the Help class.\n<p>Attributes\n<p><code>helpLevel</code> : The help&#39;s importance …\n"],["cellsList","HelpCellsAndRows","HelpCellsAndRows.html#method-i-cellsList","(helpLevel)","<p>This method overrides the cellsList method from the\nHelpCellsAndRowsOrColumns class.\n<p>Attributes\n<p><code>helpLevel</code> …\n"],["cellsList","HelpCellsAndRowsOrColumns","HelpCellsAndRowsOrColumns.html#method-i-cellsList","(helpLevel)","<p>The cellsList method is a redefinition from cellsList method in the Help\nclass.\n<p>Attributes\n<p><code>helpLevel</code> : …\n"],["cellsList","HelpOn2Cells","HelpOn2Cells.html#method-i-cellsList","(helpLevel)","<p>Presentation\n<p>The cellsList method from this class overrides this method from the\nHelpOnCells class.\n<p>Attributes …\n"],["cellsList","HelpOn3Cells","HelpOn3Cells.html#method-i-cellsList","(helpLevel)",""],["cellsList","HelpOnAColumn","HelpOnAColumn.html#method-i-cellsList","(helpLevel)",""],["cellsList","HelpOnCells","HelpOnCells.html#method-i-cellsList","(helpLevel)","<p>This method adds to the help list the value of the cell.\n<p>Parameters\n<p><code>helpLevel</code> : The help&#39;s importance …\n"],["cellsList","HelpOneRow","HelpOneRow.html#method-i-cellsList","(helpLevel)",""],["clean","HelpUi","HelpUi.html#method-i-clean","()",""],["clearRedo","Moves","Moves.html#method-i-clearRedo","()","<p>Clears the redo stack.\n"],["clickdefined?","GridUi","GridUi.html#method-i-clickdefined-3F","()",""],["colorChange","Text","Text.html#method-i-colorChange","(couleur)",""],["compresse","CompresseGrid","CompresseGrid.html#method-c-compresse","(game)",""],["connexion","Connexion","Connexion.html#method-c-connexion","(player)",""],["continuable?","AdventureLevel","AdventureLevel.html#method-i-continuable-3F","()",""],["continuable?","Session","Session.html#method-i-continuable-3F","()",""],["continuable?","TimeAttackSession","TimeAttackSession.html#method-i-continuable-3F","()",""],["continuable?","TutorialSession","TutorialSession.html#method-i-continuable-3F","()",""],["coords","CellUi","CellUi.html#method-i-coords","()",""],["copyFrozen","Grid","Grid.html#method-i-copyFrozen","()","<p>The copyFrozen method creates a new grid that will have all the non-white\ncells frozen in order to save …\n"],["coreCell","CellUi","CellUi.html#method-i-coreCell","()",""],["coreCellAt","GridUi","GridUi.html#method-i-coreCellAt","(row, col)",""],["count","ClueUi","ClueUi.html#method-i-count","(state)",""],["count","Count","Count.html#method-c-count","(game, state, vertHor, rank)",""],["createNewSave","UiManager","UiManager.html#method-i-createNewSave","()",""],["createPlayer","ConnectDB","ConnectDB.html#method-i-createPlayer","(name, password)","<p>This method adds a player in the database with the name and the password\nprovided. The game must be connected …\n"],["createSave","Session","Session.html#method-i-createSave","()",""],["deletePlayer","ConnectDB","ConnectDB.html#method-i-deletePlayer","(id)",""],["deletePlayerHg","ConnectDB","ConnectDB.html#method-i-deletePlayerHg","(id)",""],["deletePlayerSave","ConnectDB","ConnectDB.html#method-i-deletePlayerSave","(id)",""],["deleteSave","ConnectDB","ConnectDB.html#method-i-deleteSave","(id)","<p>This method deletes a Save in the database with the ID of the Save. The\ngame must be connected to the …\n"],["deleteSave","Session","Session.html#method-i-deleteSave","()",""],["destroy","Save","Save.html#method-i-destroy","()",""],["dragLeftChange","Cell","Cell.html#method-i-dragLeftChange","()","<p>The dragLeftChange method is a boolean method that returns false if the\ncell is frozen. If not, the cell&#39;s …\n"],["dragLeftClicked","CellUi","CellUi.html#method-i-dragLeftClicked","()",""],["dragable?","CellUi","CellUi.html#method-i-dragable-3F","()",""],["draged?","GridUi","GridUi.html#method-i-draged-3F","()",""],["each","Grid","Grid.html#method-i-each","()","<p>The each method goes through the grid&#39;s rows.\n"],["findFirst","Count","Count.html#method-c-findFirst","(game, state, vertHor, rank)",""],["frozenOf","Cell","Cell.html#method-i-frozenOf","(cell)","<p>This method returns the frozen state of a cell.\n<p>Parameter\n<p><code>cell</code> - The cell we want to get the frozen state …\n"],["getButtonLabel","XmlReader","XmlReader.html#method-i-getButtonLabel","(currentScreen, key)","<p>The getButtonLabel method fetches the label of a button according to the\ncurrent screen and its key. …\n"],["getGamemodes","ConnectDB","ConnectDB.html#method-i-getGamemodes","()","<p>This method retrieves the game modes available. The game must be connected\nto the database.\n<p>Return\n<p>All …\n"],["getHelpsTexts","XmlReader","XmlReader.html#method-i-getHelpsTexts","(help, helpLevel, delimiterPosition)","<p>The getHelpTexts method fetches a text according to a key and the position\nof a delimiter (here we use …\n"],["getHighScoresByGamemodeDiff","ConnectDB","ConnectDB.html#method-i-getHighScoresByGamemodeDiff","(gamemode, diff)","<p>This method retrieves the high scores by game mode and difficulty. The game\nmust be connected to the …\n"],["getImage","Diapo","Diapo.html#method-i-getImage","()",""],["getJoueur","Connexion","Connexion.html#method-c-getJoueur","()",""],["getLevel","Levels","Levels.html#method-i-getLevel","(level,overallStars)",""],["getLevelMaxStars","Levels","Levels.html#method-i-getLevelMaxStars","(lvl)",""],["getLoadingMessages","XmlReader","XmlReader.html#method-i-getLoadingMessages","(key)","<p>The getLoadingMessages method fetches a loading text message according to\nthe key\n"],["getPlayer","ConnectDB","ConnectDB.html#method-i-getPlayer","(id)","<p>This method retrieves the Player that matches the given id. The game must\nbe connected to the database. …\n"],["getPlayersSave","ConnectDB","ConnectDB.html#method-i-getPlayersSave","(player)","<p>This method retrieves the saves created by the Player. The game must be\nconnected to the database.\n<p>Attributes …\n"],["getRes","Help","Help.html#method-i-getRes","(helpLevel)","<p>This method returns the UI printable form of the help.\n"],["getSaveByID","ConnectDB","ConnectDB.html#method-i-getSaveByID","(id)","<p>This method retrieves the save from the provided ID. The game must be\nconnected to the database.\n<p>Attributes …\n"],["getScreenTexts","XmlReader","XmlReader.html#method-i-getScreenTexts","(currentScreen, key)","<p>The getScreentexts method fetches a text according to the current screen\nand its key.\n"],["getText","Help","Help.html#method-i-getText","(helpLevel)","<p>This method fetches the help text for a given help level. It is used to\ninitialize the @helpText variable …\n"],["getText","HelpAllGrassOnAColumn","HelpAllGrassOnAColumn.html#method-i-getText","(helpLevel)",""],["getText","HelpAllGrassOnARow","HelpAllGrassOnARow.html#method-i-getText","(helpLevel)",""],["getText","HelpAllPossibilitiesGiveItColumn","HelpAllPossibilitiesGiveItColumn.html#method-i-getText","(helpLevel)","<p>The getText method sends the help text the player will see.\n<p>Attributes\n<p><code>helpLevel</code> : Depending on this attribute, …\n"],["getText","HelpAllPossibilitiesGiveItRow","HelpAllPossibilitiesGiveItRow.html#method-i-getText","(helpLevel)","<p>The getText method sends the help text the player will see. It returns the\nhelpText variable that changes …\n"],["getText","HelpAllTentsOnAColumn","HelpAllTentsOnAColumn.html#method-i-getText","(helpLevel)",""],["getText","HelpAllTentsOnARow","HelpAllTentsOnARow.html#method-i-getText","(helpLevel)",""],["getText","HelpCellTooFarOfTrees","HelpCellTooFarOfTrees.html#method-i-getText","(helpLevel)","<p>Presentation\n<p>The getText method returns the help text saying that the cell must be\ngrass. This text is …\n"],["getText","HelpNotFound","HelpNotFound.html#method-i-getText","(helpLevel)","<p>This method is a redefinition of the getText method in the Help class.\n<p>Returns\n<p>It returns a text saying …\n"],["getText","HelpOnACellTouchATent","HelpOnACellTouchATent.html#method-i-getText","(helpLevel)",""],["getText","HelpsOn2CellTentUniqueSolution","HelpsOn2CellTentUniqueSolution.html#method-i-getText","(helpLevel)",""],["getText","HelpsOn2CellsGrassLinkedTree","HelpsOn2CellsGrassLinkedTree.html#method-i-getText","(helpLevel)","<p>Presentation\n<p>This method fetches the text from the XML file to show the help text.\n<p>Parameters\n"],["getText","HelpsOnACellIsTentBecauseOfTree","HelpsOnACellIsTentBecauseOfTree.html#method-i-getText","(helpLevel)",""],["getText","HelpsOnACellOverlap","HelpsOnACellOverlap.html#method-i-getText","(helpLevel)",""],["getVictoryScreen","UiManager","UiManager.html#method-i-getVictoryScreen","(session)",""],["glowing","CellUi","CellUi.html#method-i-glowing","()",""],["goToNextStape","TutorialGameScreen","TutorialGameScreen.html#method-i-goToNextStape","()",""],["gridAltered","GameScreen","GameScreen.html#method-i-gridAltered","()",""],["gridAltered","TutorialGameScreen","TutorialGameScreen.html#method-i-gridAltered","()",""],["help","AllTreesHaveTentsHelper","AllTreesHaveTentsHelper.html#method-i-help","(game)",""],["help","CellDontTouchTreeHelper","CellDontTouchTreeHelper.html#method-i-help","(game)",""],["help","CellIsAGrass","CellIsAGrass.html#method-i-help","(game)",""],["help","CellTouchATentHelper","CellTouchATentHelper.html#method-i-help","(game)",""],["help","CellWhiteOverlap","CellWhiteOverlap.html#method-i-help","(game)",""],["help","FictivHelper","FictivHelper.html#method-i-help","(game)",""],["help","Game","Game.html#method-i-help","()",""],["help","Helper","Helper.html#method-i-help","(game)",""],["help","RowsAndColumnsFindGrass","RowsAndColumnsFindGrass.html#method-i-help","(game)",""],["help","RowsAndColumnsFindTent","RowsAndColumnsFindTent.html#method-i-help","(game)",""],["help","RowsAndColumnsGrassHelper","RowsAndColumnsGrassHelper.html#method-i-help","(game)",""],["help","RowsAndColumnsTentsHelper","RowsAndColumnsTentsHelper.html#method-i-help","(game)",""],["helpDisplayed?","GameScreen","GameScreen.html#method-i-helpDisplayed-3F","()",""],["helpDisplayed?","TutorialGameScreen","TutorialGameScreen.html#method-i-helpDisplayed-3F","()",""],["helpFound?","Help","Help.html#method-i-helpFound-3F","()","<p>This tries to find the necessary help.\n<p>Returns\n<p>Returns true if help has been found, else it returns false. …\n"],["helpFound?","HelpNotFound","HelpNotFound.html#method-i-helpFound-3F","()","<p>This method is a redefinition of the helpFound? method in the Help class.\n<p>Returns\n<p>It returns false because …\n"],["helpLevelManagement","Helper","Helper.html#method-i-helpLevelManagement","(aHelp)",""],["helpsLevelsLimits","Helper","Helper.html#method-i-helpsLevelsLimits","(aHelpLevel)",""],["hide","TestGame","TestGame.html#method-c-hide","()",""],["hover","GridUi","GridUi.html#method-i-hover","(cell)",""],["initGtkGrid","GridUi","GridUi.html#method-i-initGtkGrid","()",""],["isAGrass?","Cell","Cell.html#method-i-isAGrass-3F","()","<p>The isAGrass? method returns true if the cell&#39;s state is grass.\n"],["isATent?","Cell","Cell.html#method-i-isATent-3F","()","<p>The isATent? method returns true if the cell&#39;s state is a tent.\n"],["isATree?","Cell","Cell.html#method-i-isATree-3F","()",""],["isAWhite?","Cell","Cell.html#method-i-isAWhite-3F","()","<p>The isAWhite? method returns true if the cell&#39;s state is white.\n"],["isPlayerExist","ConnectDB","ConnectDB.html#method-i-isPlayerExist","(name)","<p>This method check if the name of the Player already exists in the database\nThe game must be connected …\n"],["leftClicked","CellUi","CellUi.html#method-i-leftClicked","()",""],["leftClicked","GridUi","GridUi.html#method-i-leftClicked","()","<p>called when a left click occur on the grid\n"],["leftClickedDraged","GridUi","GridUi.html#method-i-leftClickedDraged","()","<p>called when a draged left click occur on the grid\n"],["load","Save","Save.html#method-c-load","(id)",""],["load","Save","Save.html#method-i-load","()",""],["lvlAvailable?","Levels","Levels.html#method-i-lvlAvailable-3F","(lvl, overAllStars)",""],["moves","Guess","Guess.html#method-i-moves","()",""],["new","AdventureLevel","AdventureLevel.html#method-c-new","(gameMode, difficulty, scoreMultiplier, maxStars,numberOfGrid, overallStars, levelNumber )",""],["new","Button","Button.html#method-c-new","(orientation, label)","<p>This method initializes the button&#39;s variables in order to act\nproperly.\n"],["new","Cell","Cell.html#method-c-new","(args={state: :white, frozen: false, row: 0, column: 0})","<p>Parameters\n\n<pre>def initialize(args={state: :white, frozen: false, row: 0, column: 0})</pre>\n<p><code>state</code> - The cell&#39;s …\n"],["new","CellAsset","CellAsset.html#method-c-new","(file,nRows, nCols)",""],["new","CellAssets","CellAssets.html#method-c-new","(nRows, nCols)","<p>@buttons …\n"],["new","CellUi","CellUi.html#method-c-new","(parent, row, col, assets)",""],["new","ChronoUi","ChronoUi.html#method-c-new","(time)","<p>The initialization method creates a new button with specific values for the\nchronometer&#39;s creation. …\n"],["new","ClueUi","ClueUi.html#method-c-new","(orientation, label, index, game)",""],["new","ConnectDB","ConnectDB.html#method-c-new","()","<p>Constructor of ConnectDB. Connects the game to the database.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">db</span> = <span class=\"ruby-constant\">ConnectDB</span>.<span class=\"ruby-identifier\">new</span>()\n</pre>\n"],["new","Connexion","Connexion.html#method-c-new","()",""],["new","Diapo","Diapo.html#method-c-new","(width , height)",""],["new","Difficulty","Difficulty.html#method-c-new","(id, name)","<p>The class&#39; constructor.\n<p>Attributes\n<p><code>id</code> - The id of the Difficulty\n"],["new","Game","Game.html#method-c-new","(session)",""],["new","GameDecorated","GameDecorated.html#method-c-new","(game)",""],["new","GameScreen","GameScreen.html#method-c-new","(manager,game,cellAssets,victoryScreen)",""],["new","Gamemode","Gamemode.html#method-c-new","(id, name)","<p>Constructor of a Gamemode\n<p>Attributes\n<p><code>id</code> - The id of the Gamemode\n"],["new","Grid","Grid.html#method-c-new","(nRow, nCol, gridAnswers, withAnswers=false)","<p>Parameters\n<p><code>nRow</code> - The number of rows\n<p><code>nCol</code> - The number of columns\n"],["new","GridGenerator","GridGenerator.html#method-c-new","(difficulty =:random)",""],["new","GridUi","GridUi.html#method-c-new","(game, assets, parent)","<p>creation of a new grid UI @param game the current game\n"],["new","Guess","Guess.html#method-c-new","(grid, prev = nil)",""],["new","Help","Help.html#method-c-new","()","<p>The class&#39; constructor. This method takes no parameters and initializes\ntwo variables :\n<p><code>price</code> : An …\n"],["new","HelpAllGrassOnAColumn","HelpAllGrassOnAColumn.html#method-c-new","(rowOrColumn)","<p>The class&#39; constructor. This method takes no parameters and initializes\ntwo variables :\n<p><code>price</code> : An …\n"],["new","HelpAllGrassOnAColumn","HelpAllGrassOnAColumn.html#method-c-new","(column)","<p>Help when all the grass are placed and we need only tents\n"],["new","HelpAllGrassOnARow","HelpAllGrassOnARow.html#method-c-new","(rowOrColumn)","<p>The class&#39; constructor. This method takes no parameters and initializes\ntwo variables :\n<p><code>price</code> : An …\n"],["new","HelpAllGrassOnARow","HelpAllGrassOnARow.html#method-c-new","(row)","<p>help the player when there is a row with all the grass needed, so the\nplayer need to fill with tents …\n"],["new","HelpAllPossibilitiesGiveItColumn","HelpAllPossibilitiesGiveItColumn.html#method-c-new","(cell, column, state)","<p>The initialize method gives to the state variable a value from the\nmethod&#39;s parameters and initializes …\n"],["new","HelpAllPossibilitiesGiveItRow","HelpAllPossibilitiesGiveItRow.html#method-c-new","(cell, row, state)","<p>The initialize method gives to the state variable a value from the\nmethod&#39;s parameters and initializes …\n"],["new","HelpAllTentsOnAColumn","HelpAllTentsOnAColumn.html#method-c-new","(rowOrColumn)","<p>The class&#39; constructor. This method takes no parameters and initializes\ntwo variables :\n<p><code>price</code> : An …\n"],["new","HelpAllTentsOnAColumn","HelpAllTentsOnAColumn.html#method-c-new","(column)","<p>Help when all the tents are placed and we need only grass\n"],["new","HelpAllTentsOnARow","HelpAllTentsOnARow.html#method-c-new","(rowOrColumn)","<p>The class&#39; constructor. This method takes no parameters and initializes\ntwo variables :\n<p><code>price</code> : An …\n"],["new","HelpAllTentsOnARow","HelpAllTentsOnARow.html#method-c-new","(row)","<p>class saying that all tents of the row are placed, it need to be filled\nwith grass\n"],["new","HelpCellTooFarOfTrees","HelpCellTooFarOfTrees.html#method-c-new","(cell)","<p>The initialize method just calls the initialize method from HelpOn1Cell\nwith the cell taken in parameters. …\n"],["new","HelpCellsAndColumns","HelpCellsAndColumns.html#method-c-new","(cell, column)","<p>This method only does what the initialize method in\nHelpCellsAndRowsOrColumns does, but with a column …\n"],["new","HelpCellsAndRows","HelpCellsAndRows.html#method-c-new","(cell, row)","<p>This method only does what the initialize method in\nHelpCellsAndRowsOrColumns does, but with a row instead …\n"],["new","HelpCellsAndRowsOrColumns","HelpCellsAndRowsOrColumns.html#method-c-new","(cell, rowOrColumn)","<p>This class&#39; constructor needs 2 attributes and instanciates 3\nvariables.\n<p>Attributes\n<p><code>cell</code> - A cell we …\n"],["new","HelpNotFound","HelpNotFound.html#method-c-new","()","<p>The class&#39; constructor. This method takes no parameters and initializes\ntwo variables :\n<p><code>price</code> : An …\n"],["new","HelpNotFound","HelpNotFound.html#method-c-new","()",""],["new","HelpOn2Cells","HelpOn2Cells.html#method-c-new","(cell1, cell2)","<p>Presentation\n<p>This class&#39; constructor initializes the two variables taken in\nattributes as described …\n"],["new","HelpOn3Cells","HelpOn3Cells.html#method-c-new","(cell1, cell2, cell3)",""],["new","HelpOnACellTouchATent","HelpOnACellTouchATent.html#method-c-new","(cell1, cell2)","<p>Presentation\n<p>This class&#39; constructor initializes the two variables taken in\nattributes as described …\n"],["new","HelpOnACellTouchATent","HelpOnACellTouchATent.html#method-c-new","(cell, tentCell)","<p>a class for helping when a cell touch a tent, so the cell is grass\n"],["new","HelpOnAColumn","HelpOnAColumn.html#method-c-new","(column)","<p>helps player when we need to give a column\n"],["new","HelpOnCells","HelpOnCells.html#method-c-new","(cell)","<p>This method&#39;s constructor assigns a value to the @cell variable and\ncalls constructor from the Help …\n"],["new","HelpOnRowsAndColumn","HelpOnRowsAndColumn.html#method-c-new","(rowOrColumn)",""],["new","HelpOneRow","HelpOneRow.html#method-c-new","(row)","<p>help gave when player need a help by giving a row\n"],["new","HelpUi","HelpUi.html#method-c-new","()",""],["new","Helper","Helper.html#method-c-new","(uniqHelpLevel)",""],["new","HelpsOn2CellTentUniqueSolution","HelpsOn2CellTentUniqueSolution.html#method-c-new","(cell1, cell2)","<p>Presentation\n<p>This class&#39; constructor initializes the two variables taken in\nattributes as described …\n"],["new","HelpsOn2CellTentUniqueSolution","HelpsOn2CellTentUniqueSolution.html#method-c-new","(cellTent, cellTree)","<p>a class for helping when a cell is link to a tree because of only one\nposibility\n"],["new","HelpsOn2CellsGrassLinkedTree","HelpsOn2CellsGrassLinkedTree.html#method-c-new","(cellTent, cellTree)","<p>Presentation\n<p>The class&#39; constructor that is here to initialize the two variables\ntaken in parameters …\n"],["new","HelpsOnACellIsTentBecauseOfTree","HelpsOnACellIsTentBecauseOfTree.html#method-c-new","(cell1, cell2)","<p>Presentation\n<p>This class&#39; constructor initializes the two variables taken in\nattributes as described …\n"],["new","HelpsOnACellIsTentBecauseOfTree","HelpsOnACellIsTentBecauseOfTree.html#method-c-new","(cellTent, cellTree)","<p>a class for helping when a cell is link to a tree\n"],["new","HelpsOnACellOverlap","HelpsOnACellOverlap.html#method-c-new","(cell1, cell2, cell3)","<p>This method&#39;s constructor assigns a value to the @cell variable and\ncalls constructor from the Help …\n"],["new","HelpsOnACellOverlap","HelpsOnACellOverlap.html#method-c-new","(cellGrass, cellwhite1, cellwhite2)","<p>a class for helping when a cell touch a tent, so the cell is grass\n"],["new","HighScore","HighScore.html#method-c-new","(idDiff, idPlayer, score, idMode)","<p>Constructor of a HighScore.\n<p>Attributes\n<p><code>idDiff</code> - The id of the Difficulty of the HighScore\n"],["new","LevelNumber","LevelNumber.html#method-c-new","(manager)",""],["new","Levels","Levels.html#method-c-new","()",""],["new","ListeSave","ListeSave.html#method-c-new","(manager,joueur)",""],["new","LoadingScreen","LoadingScreen.html#method-c-new","(manager)",""],["new","MotdepasseOublie","MotdepasseOublie.html#method-c-new","()",""],["new","Moves","Moves.html#method-c-new","(moves = [])","<p>Creates a new Moves object.\n<p><strong>Arguments</strong> :\n<p><code>moves</code> -&gt; all the Moves (empty by default).\n"],["new","PauseScreen","PauseScreen.html#method-c-new","(gameScreen,manager,game)",""],["new","Player","Player.html#method-c-new","(id, name, password)","<p>Constructor of a Player.\n<p>Attributes\n<p><code>id</code> - The id of the Difficulty of the HighScore\n"],["new","Probleme","Probleme.html#method-c-new","()",""],["new","ProblemeIdent","ProblemeIdent.html#method-c-new","()",""],["new","ProcessStatus","ProcessStatus.html#method-c-new","()",""],["new","QuickPlaySession","QuickPlaySession.html#method-c-new","(gameMode,difficulty, partOfAdventure=false)","<p>attr_writer :score\n"],["new","Save","Save.html#method-c-new","(session)",""],["new","SaveBlock","SaveBlock.html#method-c-new","(manager,save, parent)",""],["new","SaveContent","SaveContent.html#method-c-new","(guess, time, score, gridPick, gameMode, difficulty)",""],["new","SaveDB","SaveDB.html#method-c-new","(id, player, date, content)","<p>Constructor of a Save.\n<p>Attributes\n<p><code>id</code> - The ID of the Save\n"],["new","Screen","Screen.html#method-c-new","(parent)",""],["new","ScrollableArea","ScrollableArea.html#method-c-new","(orientation)",""],["new","SelectionUi","SelectionUi.html#method-c-new","()",""],["new","Session","Session.html#method-c-new","(gameMode, difficulty, partOfAdventure=false)","<p>attr_writer :score\n"],["new","Star","Star.html#method-c-new","(nbEtoile,nbEtoileObtenu)",""],["new","TestGame","TestGame.html#method-c-new","()",""],["new","Text","Text.html#method-c-new","(label, size=30)",""],["new","TimeAttackSession","TimeAttackSession.html#method-c-new","(gameMode, difficulty, partOfAdventure=false)","<p>attr_writer :score\n"],["new","TutorialGameScreen","TutorialGameScreen.html#method-c-new","(manager,game,cellAssets,victoryScreen)",""],["new","TutorialSession","TutorialSession.html#method-c-new","()","<p>attr_writer :score\n"],["new","UiManager","UiManager.html#method-c-new","(window,player)",""],["new","VictoryScreen","VictoryScreen.html#method-c-new","(manager,session)",""],["new","XmlReader","XmlReader.html#method-c-new","()","<p>The initialization method reads the XML document, which is converted into a\nHashTable indented by element. …\n"],["next","Guess","Guess.html#method-i-next","()",""],["normal","CellUi","CellUi.html#method-i-normal","()",""],["nuImage","Diapo","Diapo.html#method-i-nuImage","()",""],["onClick","Button","Button.html#method-i-onClick","(block=nil)","<p>The onClick method determins how a button acts when it is clicked or\nhovered.\n"],["onClick","Text","Text.html#method-i-onClick","(block=nil)",""],["onConfigureEventSignal","HelpUi","HelpUi.html#method-i-onConfigureEventSignal","(da)",""],["onDestroy","Probleme","Probleme.html#method-i-onDestroy","()",""],["onDestroy","ProblemeIdent","ProblemeIdent.html#method-i-onDestroy","()",""],["onDrawSignal","HelpUi","HelpUi.html#method-i-onDrawSignal","(cr)",""],["outOfBound","CellUi","CellUi.html#method-i-outOfBound","()",""],["parce","ChronoUi","ChronoUi.html#method-i-parce","(time)","<p>The parce method is needed for the initialization and for the label update.\nIt gives the time a value …\n"],["partOfAdventure?","Session","Session.html#method-i-partOfAdventure-3F","()",""],["playerConnect","ConnectDB","ConnectDB.html#method-i-playerConnect","(name, password)","<p>This method tries to find the player in the database with the name and the\npassword provided. The game …\n"],["playerUpdate","ConnectDB","ConnectDB.html#method-i-playerUpdate","(login, mdp)",""],["price","Help","Help.html#method-i-price","(helpLevel)","<p>This method checks the price of a given help level.\n<p>Returns\n\n<pre class=\"ruby\"><span class=\"ruby-ivar\">@price</span> <span class=\"ruby-operator\">*</span> <span class=\"ruby-identifier\">helpLevel</span>\n</pre>\n"],["price","Helper","Helper.html#method-i-price","()",""],["primaryChange","Cell","Cell.html#method-i-primaryChange","()","<p>The primaryChange method is a boolean method returning false if the cell is\nfrozen. This method changes …\n"],["primaryUnchange","Cell","Cell.html#method-i-primaryUnchange","()","<p>The primaryUnchange method uses the same system as the primaryChange method\nbut is used in the case of …\n"],["realLast","GridUi","GridUi.html#method-i-realLast","()","<p>Compute the real last cell of the selection @return CellUi\n"],["recive","LoadingScreen","LoadingScreen.html#method-i-recive","(s=@textManager.getLoadingMessages(\"loading\"))",""],["recive","ProcessStatus","ProcessStatus.html#method-i-recive","()",""],["redo","Game","Game.html#method-i-redo","()",""],["redo","GridUi","GridUi.html#method-i-redo","()",""],["redo","Guess","Guess.html#method-i-redo","()","<p>Redo the last Move did in this Guess\n"],["redo","Moves","Moves.html#method-i-redo","()","<p>Redoes the last undo move (i.e replay it on the given game) and pushes it\non the undo stack.\n<p><strong>Arguments</strong> …\n"],["refresh","GridUi","GridUi.html#method-i-refresh","()",""],["removeGuess","Game","Game.html#method-i-removeGuess","()",""],["replay","Moves","Moves.html#method-i-replay","(game)","<p>Replays each move on the given Game.\n<p><strong>Arguments</strong> :\n<p><code>game</code> -&gt; the Game to replay on.\n"],["replay","Session","Session.html#method-i-replay","(continue)",""],["require_all","Object","Object.html#method-i-require_all","(_dir)","<p>@Author: VAIDIE Camille &lt;CamilleVAIDIE&gt; @Date:   8-Mar-2019 @Email: \ncamille.vaidie.etu@univ-lemans.fr …\n"],["research","AllTreesHaveTentsHelper","AllTreesHaveTentsHelper.html#method-i-research","(cell, prevCell)",""],["resetGrid","Game","Game.html#method-i-resetGrid","()",""],["resize","Asset","Asset.html#method-i-resize","(width,height)",""],["resize","CellAsset","CellAsset.html#method-i-resize","()",""],["root?","Guess","Guess.html#method-i-root-3F","()",""],["run","Game","Game.html#method-i-run","()",""],["run","LoadingScreen","LoadingScreen.html#method-i-run","()",""],["run","UiManager","UiManager.html#method-i-run","()",""],["runGameSession","UiManager","UiManager.html#method-i-runGameSession","(session)",""],["runGameSessionFromSave","UiManager","UiManager.html#method-i-runGameSessionFromSave","(save)",""],["sameState?","CellUi","CellUi.html#method-i-sameState-3F","(cell)",""],["save","ConnectDB","ConnectDB.html#method-i-save","(player, content)","<p>This method creates a Save in the database with the content and the Player\nprovided. The game must be …\n"],["select","CellUi","CellUi.html#method-i-select","()",""],["select","SelectionUi","SelectionUi.html#method-i-select","(arr)",""],["selection","GridUi","GridUi.html#method-i-selection","(cell)","<p>Draws a visual selection for the user\n"],["send","ProcessStatus","ProcessStatus.html#method-c-send","(message)",""],["setHelpOnClick","TutorialGameScreen","TutorialGameScreen.html#method-i-setHelpOnClick","()",""],["setSave","Session","Session.html#method-i-setSave","(save)",""],["setTime","AdventureLevel","AdventureLevel.html#method-i-setTime","()",""],["setTime","QuickPlaySession","QuickPlaySession.html#method-i-setTime","()",""],["setTime","Session","Session.html#method-i-setTime","()",""],["setTime","TimeAttackSession","TimeAttackSession.html#method-i-setTime","()",""],["setTime","TutorialSession","TutorialSession.html#method-i-setTime","()",""],["show","CellUi","CellUi.html#method-i-show","()",""],["show","Connexion","Connexion.html#method-c-show","()",""],["show","SelectionUi","SelectionUi.html#method-i-show","()",""],["text","LoadingScreen","LoadingScreen.html#method-i-text","(s=@textManager.getLoadingMessages(\"loading\"))",""],["title","Text","Text.html#method-i-title","()",""],["to_s","Help","Help.html#method-i-to_s","()","<p>This method a redefinition of the to_s method, used to print the help text.\n<p>Returns\n<p>Returns the @helpText …\n"],["toogleCountIndicators","GridUi","GridUi.html#method-i-toogleCountIndicators","()",""],["toogleTracer","GridUi","GridUi.html#method-i-toogleTracer","()",""],["tracerActive?","GridUi","GridUi.html#method-i-tracerActive-3F","()",""],["unLeftClicked","CellUi","CellUi.html#method-i-unLeftClicked","()",""],["undo","Game","Game.html#method-i-undo","()",""],["undo","GridUi","GridUi.html#method-i-undo","()",""],["undo","Guess","Guess.html#method-i-undo","()","<p>Undo the last Move did in this Guess\n"],["undo","Moves","Moves.html#method-i-undo","()","<p>Undoes the last move (i.e replay it on the given game) and pushes it on the\nredo stack.\n<p><strong>Arguments</strong> :\n<p><code>game</code> …\n"],["unselect","CellUi","CellUi.html#method-i-unselect","()",""],["unselect","SelectionUi","SelectionUi.html#method-i-unselect","(arr)",""],["update","ClueUi","ClueUi.html#method-i-update","()",""],["update","GameScreen","GameScreen.html#method-i-update","()",""],["update","HelpUi","HelpUi.html#method-i-update","(message=\"\")",""],["update","Save","Save.html#method-c-update","(session)",""],["update","SelectionUi","SelectionUi.html#method-i-update","(newSelection)",""],["update","TutorialGameScreen","TutorialGameScreen.html#method-i-update","()",""],["update","UiManager","UiManager.html#method-i-update","()",""],["updateLabel","Button","Button.html#method-i-updateLabel","(newLabel)","<p>The updateLabel method updates the button label with the new value taken in\nparameters.\n"],["updateLabel","ChronoUi","ChronoUi.html#method-i-updateLabel","(time)","<p>The updateLabel method updates the chronometer button&#39;s label in order\nto actualize it at each time …\n"],["updateLabel","Text","Text.html#method-i-updateLabel","(newLabel)",""],["updateSave","ConnectDB","ConnectDB.html#method-i-updateSave","(content, id)",""],["updateSave","Session","Session.html#method-i-updateSave","()",""],["updateSave","UiManager","UiManager.html#method-i-updateSave","()",""],["FichierDeGrilles","","Assets/Files/FichierDeGrilles_txt.html","","<p>06;06;AAT_TA:2;T_A___:1;A_T__T:2;T____A:1;A_T___:1;T_AAT_:2;303021\n06;06;AAT_T_:2;T_A_A_:1;A_TAT_:2;T_____:1;_A_AAT:1; …\n"],["xmlDoc.xml","","Assets/Files/Languages/xmlDoc_xml.html","","<p>&lt;!– @Author: Maxime Touze &lt;maxime&gt; @Date:   28-Mar-2019 @Email: \nmaxime_touze@univ-lemans.fr …\n"],["README","","README_md.html","","<p>Projet Des Tentes et des Arbres\n<p>Jeu programmé dans le cadre du projet de Génie Logiciel en L3 Informatique\n…\n"]]}}