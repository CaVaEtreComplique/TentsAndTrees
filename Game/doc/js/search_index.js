var search_data = {"index":{"searchIndex":["adventuresession","adventurevictoryscreen","alltreeshavetentshelper","asset","button","cell","cellasset","cellassets","celldonttouchtreehelper","celltouchatenthelper","cellui","cellwhiteoverlap","choixdiffscreen","chronoui","click","clueui","compressegrid","connectdb","connexion","constants","count","diapo","difficulty","fictivhelper","findwhitezone","game","gamedivised","gamemodescreen","gamescreen","gamemode","grid","gridgenerator","gridui","guess","guessui","help","helpallgrassonacolumn","helpallgrassonarow","helpallpossibilitiesgiveitcolumn","helpallpossibilitiesgiveitrow","helpalltentsonacolumn","helpalltentsonarow","helpcelltoofaroftrees","helpcellsandcolumns","helpcellsandrows","helpcellsandrowsorcolumns","helpnotfound","helpon1cell","helpon2cells","helpon3cells","helponacelltouchatent","helponacolumn","helponcells","helponrowsandcolumn","helponerow","helpui","helper","helpson2celltentuniquesolution","helpson2cellsgrasslinkedtree","helpsonacellistentbecauseoftree","helpsonacelloverlap","highscore","highscoresscreen","iconasset","levelnumber","levelnumbers","levelselectionscreen","levels","loadingscreen","motdepasseoublie","moves","object","parametrescreen","pausescreen","player","principalscreen","probleme","problemeident","processstatus","quickplaysession","rowsandcolumnsfindgrass","rowsandcolumnsfindtent","rowsandcolumnsgrasshelper","rowsandcolumnstentshelper","rulescreen","save","saveblockui","savedb","savescreen","screen","scrollablearea","selectionui","session","star","testgame","text","timeattacksession","tutorialgamescreen","tutorialsession","tutorialvictoryscreen","uimanager","victoryscreen","xmlreader","==()","==()","==()","==()","==()","==()","==()","==()","activatehelp()","add()","add()","add()","addhighscore()","addmove()","addmove()","apply()","applyasset()","applyon()","applyon()","applyon()","applyon()","applyon()","applyon()","begindrag()","beginguess()","birotative?()","buttonmaxstring()","calculateoverallstars()","calculateoverallstars()","calculatescore()","calculatescore()","calculatescore()","calculatescore()","calculatescore()","calculatescore()","calculatescore()","calculatestars()","calculatestars()","cellasset()","cellassetglowing()","cellassetselected()","cellat()","cellat()","cellat()","cellsfromfirsttoend()","cellslist()","cellslist()","cellslist()","cellslist()","cellslist()","cellslist()","cellslist()","cellslist()","cellslist()","clean()","clearhelper()","clearredo()","clickdefined?()","colorchange()","compresse()","continuable?()","continuable?()","continuable?()","continuable?()","continuable?()","coords()","copyfrozen()","corecell()","corecellat()","count()","count()","createnewsave()","createplayer()","createsave()","deleteplayer()","deleteplayerhg()","deleteplayersave()","deletesave()","deletesave()","destroy()","dragleftchange()","dragleftclicked()","dragable?()","draged?()","each()","find()","findfirst()","frozenof()","getbuttonlabel()","gethelpstexts()","gethighscoresbygamemodediff()","getimage()","getlanguages()","getlevel()","getlevel()","getlevelinformation()","getlevelmaxstars()","getloadingmessages()","getplayer()","getplayerhighscorebygamemodediff()","getplayerssave()","getres()","getrules()","getsavebyid()","getscreentexts()","gettext()","gettext()","gettext()","gettext()","gettext()","gettext()","gettext()","gettext()","gettext()","gettext()","gettext()","gettext()","gettext()","gettext()","gettutorialtexts()","getvictoryscreen()","glowing()","gridaltered()","help()","help()","help()","help()","help()","help()","help()","help()","help()","help()","helpdisplayed?()","helpfound?()","helpfound?()","hide()","hover()","initgtkgrid()","initlevel()","isagrass?()","isatent?()","isatree?()","isawhite?()","isplayerexist()","istutorial?()","istutorial?()","istutorial?()","istutorial?()","leftclicked()","leftclicked()","leftclickeddraged()","load()","load()","lvlavailable?()","lvlavailable?()","managehelp()","moves()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","next()","nextimage()","normal()","onclick()","onclick()","onconfigureeventsignal()","ondestroy()","ondestroy()","ondrawsignal()","outofbound()","parce()","partofadventure?()","playerconnect()","playerupdate()","previousimage()","price()","primarychange()","primaryunchange()","reallast()","recive()","recive()","redo()","redo()","redo()","redo()","refresh()","refresh()","refresh()","refresh()","refreshoverallstar()","removeguess()","replay()","replay()","replay()","require_all()","research()","resetgrid()","resize()","resize()","root?()","run()","run()","run()","runadventuresession()","rungamesession()","rungamesessionfromsave()","samestate?()","select()","select()","selection()","send()","setbackground()","setsave()","settime()","settime()","settime()","settime()","setwrap()","show()","show()","text()","title()","to_s()","tooglecountindicators()","toogletracer()","traceractive?()","unleftclicked()","undo()","undo()","undo()","undo()","unselect()","unselect()","update()","update()","update()","update()","update()","update()","updatehighscore()","updatehighscore()","updatelabel()","updatelabel()","updatelabel()","updateoverallstarshash()","updatesave()","updatesave()","updatesave()"],"longSearchIndex":["adventuresession","adventurevictoryscreen","alltreeshavetentshelper","asset","button","cell","cellasset","cellassets","celldonttouchtreehelper","celltouchatenthelper","cellui","cellwhiteoverlap","choixdiffscreen","chronoui","click","clueui","compressegrid","connectdb","connexion","constants","count","diapo","difficulty","fictivhelper","findwhitezone","game","gamedivised","gamemodescreen","gamescreen","gamemode","grid","gridgenerator","gridui","guess","guessui","help","helpallgrassonacolumn","helpallgrassonarow","helpallpossibilitiesgiveitcolumn","helpallpossibilitiesgiveitrow","helpalltentsonacolumn","helpalltentsonarow","helpcelltoofaroftrees","helpcellsandcolumns","helpcellsandrows","helpcellsandrowsorcolumns","helpnotfound","helpon1cell","helpon2cells","helpon3cells","helponacelltouchatent","helponacolumn","helponcells","helponrowsandcolumn","helponerow","helpui","helper","helpson2celltentuniquesolution","helpson2cellsgrasslinkedtree","helpsonacellistentbecauseoftree","helpsonacelloverlap","highscore","highscoresscreen","iconasset","levelnumber","levelnumbers","levelselectionscreen","levels","loadingscreen","motdepasseoublie","moves","object","parametrescreen","pausescreen","player","principalscreen","probleme","problemeident","processstatus","quickplaysession","rowsandcolumnsfindgrass","rowsandcolumnsfindtent","rowsandcolumnsgrasshelper","rowsandcolumnstentshelper","rulescreen","save","saveblockui","savedb","savescreen","screen","scrollablearea","selectionui","session","star","testgame","text","timeattacksession","tutorialgamescreen","tutorialsession","tutorialvictoryscreen","uimanager","victoryscreen","xmlreader","cell#==()","grid#==()","help#==()","helpcellsandrowsorcolumns#==()","helpon2cells#==()","helpon3cells#==()","helponcells#==()","helponrowsandcolumn#==()","clueui#activatehelp()","moves#add()","processstatus::add()","scrollablearea#add()","connectdb#addhighscore()","game#addmove()","guess#addmove()","text#apply()","cellui#applyasset()","adventurevictoryscreen#applyon()","asset#applyon()","levelselectionscreen#applyon()","screen#applyon()","tutorialvictoryscreen#applyon()","victoryscreen#applyon()","gridui#begindrag()","game#beginguess()","cell#birotative?()","xmlreader#buttonmaxstring()","adventuresession#calculateoverallstars()","levels#calculateoverallstars()","adventuresession#calculatescore()","game#calculatescore()","levels#calculatescore()","quickplaysession#calculatescore()","session#calculatescore()","timeattacksession#calculatescore()","tutorialsession#calculatescore()","adventuresession#calculatestars()","levels#calculatestars()","cellassets#cellasset()","cellassets#cellassetglowing()","cellassets#cellassetselected()","game#cellat()","grid#cellat()","guess#cellat()","gridui#cellsfromfirsttoend()","help#cellslist()","helpcellsandcolumns#cellslist()","helpcellsandrows#cellslist()","helpcellsandrowsorcolumns#cellslist()","helpon2cells#cellslist()","helpon3cells#cellslist()","helponacolumn#cellslist()","helponcells#cellslist()","helponerow#cellslist()","helpui#clean()","game#clearhelper()","moves#clearredo()","gridui#clickdefined?()","text#colorchange()","compressegrid::compresse()","adventuresession#continuable?()","levels#continuable?()","session#continuable?()","timeattacksession#continuable?()","tutorialsession#continuable?()","cellui#coords()","grid#copyfrozen()","cellui#corecell()","gridui#corecellat()","clueui#count()","count::count()","uimanager#createnewsave()","connectdb#createplayer()","session#createsave()","connectdb#deleteplayer()","connectdb#deleteplayerhg()","connectdb#deleteplayersave()","connectdb#deletesave()","session#deletesave()","save#destroy()","cell#dragleftchange()","cellui#dragleftclicked()","cellui#dragable?()","gridui#draged?()","grid#each()","findwhitezone::find()","count::findfirst()","cell#frozenof()","xmlreader#getbuttonlabel()","xmlreader#gethelpstexts()","connectdb#gethighscoresbygamemodediff()","diapo#getimage()","xmlreader#getlanguages()","adventuresession#getlevel()","levels#getlevel()","adventuresession#getlevelinformation()","levels#getlevelmaxstars()","xmlreader#getloadingmessages()","connectdb#getplayer()","connectdb#getplayerhighscorebygamemodediff()","connectdb#getplayerssave()","help#getres()","xmlreader#getrules()","connectdb#getsavebyid()","xmlreader#getscreentexts()","help#gettext()","helpallgrassonacolumn#gettext()","helpallgrassonarow#gettext()","helpallpossibilitiesgiveitcolumn#gettext()","helpallpossibilitiesgiveitrow#gettext()","helpalltentsonacolumn#gettext()","helpalltentsonarow#gettext()","helpcelltoofaroftrees#gettext()","helpnotfound#gettext()","helponacelltouchatent#gettext()","helpson2celltentuniquesolution#gettext()","helpson2cellsgrasslinkedtree#gettext()","helpsonacellistentbecauseoftree#gettext()","helpsonacelloverlap#gettext()","xmlreader#gettutorialtexts()","uimanager#getvictoryscreen()","cellui#glowing()","gamescreen#gridaltered()","alltreeshavetentshelper#help()","celldonttouchtreehelper#help()","celltouchatenthelper#help()","cellwhiteoverlap#help()","fictivhelper#help()","game#help()","rowsandcolumnsfindgrass#help()","rowsandcolumnsfindtent#help()","rowsandcolumnsgrasshelper#help()","rowsandcolumnstentshelper#help()","gamescreen#helpdisplayed?()","help#helpfound?()","helpnotfound#helpfound?()","testgame::hide()","gridui#hover()","gridui#initgtkgrid()","levels#initlevel()","cell#isagrass?()","cell#isatent?()","cell#isatree?()","cell#isawhite?()","connectdb#isplayerexist()","quickplaysession#istutorial?()","session#istutorial?()","timeattacksession#istutorial?()","tutorialsession#istutorial?()","cellui#leftclicked()","gridui#leftclicked()","gridui#leftclickeddraged()","save::load()","save#load()","adventuresession#lvlavailable?()","levels#lvlavailable?()","game#managehelp()","guess#moves()","adventuresession::new()","adventurevictoryscreen::new()","asset::new()","button::new()","cell::new()","cellasset::new()","cellassets::new()","cellui::new()","chronoui::new()","clueui::new()","connectdb::new()","diapo::new()","difficulty::new()","game::new()","gamedivised::new()","gamescreen::new()","gamemode::new()","grid::new()","gridgenerator::new()","gridui::new()","guess::new()","help::new()","helpallpossibilitiesgiveitcolumn::new()","helpallpossibilitiesgiveitrow::new()","helpcelltoofaroftrees::new()","helpcellsandcolumns::new()","helpcellsandrows::new()","helpcellsandrowsorcolumns::new()","helpnotfound::new()","helpnotfound::new()","helpon2cells::new()","helpon3cells::new()","helponacelltouchatent::new()","helponcells::new()","helponrowsandcolumn::new()","helpui::new()","helpson2celltentuniquesolution::new()","helpson2cellsgrasslinkedtree::new()","helpsonacellistentbecauseoftree::new()","helpsonacelloverlap::new()","highscore::new()","highscoresscreen::new()","iconasset::new()","levelnumber::new()","levelnumbers::new()","levelselectionscreen::new()","levels::new()","loadingscreen::new()","motdepasseoublie::new()","moves::new()","pausescreen::new()","player::new()","probleme::new()","problemeident::new()","processstatus::new()","quickplaysession::new()","save::new()","saveblockui::new()","savedb::new()","savescreen::new()","screen::new()","scrollablearea::new()","selectionui::new()","session::new()","star::new()","testgame::new()","text::new()","timeattacksession::new()","tutorialsession::new()","tutorialvictoryscreen::new()","uimanager::new()","victoryscreen::new()","xmlreader::new()","guess#next()","diapo#nextimage()","cellui#normal()","button#onclick()","text#onclick()","helpui#onconfigureeventsignal()","probleme#ondestroy()","problemeident#ondestroy()","helpui#ondrawsignal()","cellui#outofbound()","chronoui#parce()","session#partofadventure?()","connectdb#playerconnect()","connectdb#playerupdate()","diapo#previousimage()","help#price()","cell#primarychange()","cell#primaryunchange()","gridui#reallast()","loadingscreen#recive()","processstatus#recive()","game#redo()","gridui#redo()","guess#redo()","moves#redo()","gridui#refresh()","levelnumber#refresh()","levelnumbers#refresh()","star#refresh()","levelselectionscreen#refreshoverallstar()","game#removeguess()","adventuresession#replay()","moves#replay()","session#replay()","object#require_all()","alltreeshavetentshelper#research()","game#resetgrid()","asset#resize()","cellasset#resize()","guess#root?()","game#run()","loadingscreen#run()","uimanager#run()","uimanager#runadventuresession()","uimanager#rungamesession()","uimanager#rungamesessionfromsave()","cellui#samestate?()","cellui#select()","selectionui#select()","gridui#selection()","processstatus::send()","text#setbackground()","session#setsave()","quickplaysession#settime()","session#settime()","timeattacksession#settime()","tutorialsession#settime()","text#setwrap()","cellui#show()","selectionui#show()","loadingscreen#text()","text#title()","help#to_s()","gridui#tooglecountindicators()","gridui#toogletracer()","gridui#traceractive?()","cellui#unleftclicked()","game#undo()","gridui#undo()","guess#undo()","moves#undo()","cellui#unselect()","selectionui#unselect()","clueui#update()","gamescreen#update()","helpui#update()","save::update()","selectionui#update()","uimanager#update()","connectdb#updatehighscore()","uimanager#updatehighscore()","button#updatelabel()","chronoui#updatelabel()","text#updatelabel()","adventuresession#updateoverallstarshash()","connectdb#updatesave()","session#updatesave()","uimanager#updatesave()"],"info":[["AdventureSession","","AdventureSession.html","","<p>Presentation\n<p>This class is inherited from Session. The AdventureSession is the session that will be saved …\n"],["AdventureVictoryScreen","","AdventureVictoryScreen.html","",""],["AllTreesHaveTentsHelper","","AllTreesHaveTentsHelper.html","","<p>Presentation\n<p>The AllTreesHaveTentsHelper class is a helper class inherited from FictivHelper. Its role …\n"],["Asset","","Asset.html","","<p>Presentation\n<p>Asset is an abstract class needed to create and use all of the images from the game. It creates …\n"],["Button","","Button.html","","<p>Presentation\n<p>The Button class implements how every button in the game should work.\n<p>Methods\n"],["Cell","","Cell.html","","<p>Presentation\n<p>The Cell class is the core class of every cell in the game.\n<p>Variables\n"],["CellAsset","","CellAsset.html","",""],["CellAssets","","CellAssets.html","",""],["CellDontTouchTreeHelper","","CellDontTouchTreeHelper.html","","<p>Presentation\n<p>The CellDontTouchTreeHelper class is a helper class inherited from FictivHelper. Its role …\n"],["CellTouchATentHelper","","CellTouchATentHelper.html","","<p>Presentation\n<p>The CellTouchATentHelper class is a helper class inherited from FictivHelper. Its role is …\n"],["CellUi","","CellUi.html","",""],["CellWhiteOverlap","","CellWhiteOverlap.html","","<p>Presentation\n<p>The CellWhiteOverlap class is a helper class inherited from FictivHelper. Its role is to …\n"],["ChoixDiffScreen","","ChoixDiffScreen.html","","<p>Presentation\n<p>ChoixDiffScreen is an inherited class from the Screen class. This class only needs to be …\n"],["ChronoUi","","ChronoUi.html","","<p>Presentation\n<p>The ChronoUI class is inherited from the Text class and manages the in-game chronometer. …\n"],["Click","","Click.html","","<p>@Author: Corentin Petit &lt;CorentinPetit&gt; @Date:   08-Feb-2019 @Email:  corentin.petit.etu@univ-lemans.fr …\n"],["ClueUi","","ClueUi.html","",""],["CompresseGrid","","CompresseGrid.html","","<p>Presentation\n<p>The Count class give an extended methode for Game class\n<p>Methods\n"],["ConnectDB","","ConnectDB.html","","<p>Presentation\n<p>The ConnectDB class is the main database class and the only one that can reach it. Its methods …\n"],["Connexion","","Connexion.html","","<p>Presentation\n<p>The Connexion class is the main class of the project.\n<p>Instance variables\n"],["Constants","","Constants.html","","<p>@Author: Corentin Petit &lt;CorentinPetit&gt; @Date:   08-Feb-2019 @Email:  corentin.petit.etu@univ-lemans.fr …\n"],["Count","","Count.html","","<p>Presentation\n<p>The Count class give some extended methode to Game class\n<p>Methods\n"],["Diapo","","Diapo.html","",""],["Difficulty","","Difficulty.html","","<p>Presentation\n<p>The Difficulty class is here to represent a difficulty in the database. A Difficulty is represented …\n"],["FictivHelper","","FictivHelper.html","","<p>Presentation\n<p>The FictivHelper class is a fictiv helper class, it&#39;s role is to say that all helper …\n"],["FindWhiteZone","","FindWhiteZone.html","","<p>Presentation\n<p>The FindWhiteZone class is an extended method from the Game class.\n<p>Methods\n"],["Game","","Game.html","",""],["GameDivised","","GameDivised.html","","<p>Presentation\n<p>The GameDivised class represents the grid from the Game class as four smaller grids, with …\n"],["GameModeScreen","","GameModeScreen.html","","<p>Presentation\n<p>GameModeScreen is an inherited class from the Screen class. This class only needs to be initialized …\n"],["GameScreen","","GameScreen.html","",""],["Gamemode","","Gamemode.html","","<p>Presentation\n<p>This method is used to represent a game mode in the database. A Gamemode is defined by its …\n"],["Grid","","Grid.html","","<p>Presentation\n<p>The Grid class is the core of all the grids in the game.\n<p>Variables\n"],["GridGenerator","","GridGenerator.html","","<p>@Author: Corentin Petit &lt;CorentinPetit&gt; @Date:   09-Feb-2019 @Email:  corentin.petit.etu@univ-lemans.fr …\n"],["GridUi","","GridUi.html","",""],["Guess","","Guess.html","",""],["GuessUi","","GuessUi.html","",""],["Help","","Help.html","","<p>The help class is an abstract class. It is the general parent of all the other help classes in the game. …\n"],["HelpAllGrassOnAColumn","","HelpAllGrassOnAColumn.html","","<p>Presentation\n<p>The HelpAllGrassOnAColumn class is inherited from the HelpOnAColumn abstract class. It is …\n"],["HelpAllGrassOnARow","","HelpAllGrassOnARow.html","","<p>Presentation\n<p>The HelpAllGrassOnARow class is inherited from the HelpOneRow abstract class. It is used …\n"],["HelpAllPossibilitiesGiveItColumn","","HelpAllPossibilitiesGiveItColumn.html","","<p>The HelpAllPossibilitiesGiveItColumn class is inherited from the HelpCellsAndColumns class and helps …\n"],["HelpAllPossibilitiesGiveItRow","","HelpAllPossibilitiesGiveItRow.html","","<p>The HelpAllPossibilitiesGiveItRow class is inherited from the HelpCellsAndRows class and helps when all …\n"],["HelpAllTentsOnAColumn","","HelpAllTentsOnAColumn.html","","<p>Presentation\n<p>The HelpAllTentsOnAColumn class is inherited from the HelpOnAColumn abstract class. It is …\n"],["HelpAllTentsOnARow","","HelpAllTentsOnARow.html","","<p>Presentation\n<p>The HelpAllTentsOnARow class is inherited from the HelpOneRow abstract class. It is used …\n"],["HelpCellTooFarOfTrees","","HelpCellTooFarOfTrees.html","","<p>Presentation\n<p>The HelpCellTooFarOfTrees class is inherited from the HelpOn1Cell class. This class is used …\n"],["HelpCellsAndColumns","","HelpCellsAndColumns.html","","<p>The HelpCellsAndColumns class is an abstract class inherited from the abstract class HelpCellsAndRowsOrColumns …\n"],["HelpCellsAndRows","","HelpCellsAndRows.html","","<p>The HelpCellsAndRows class is an abstract class inherited from the abstract class HelpCellsAndRowsOrColumns …\n"],["HelpCellsAndRowsOrColumns","","HelpCellsAndRowsOrColumns.html","","<p>The HelpCellsAndRowsOrColumns is an abstract class inherited from the Help class and it will lead all …\n"],["HelpNotFound","","HelpNotFound.html","","<p>The HelpNotFound class is inherited from the Help class. This class is instanciated when no help can …\n"],["HelpOn1Cell","","HelpOn1Cell.html","","<p>Presentation\n<p>The HelpOn1Cell class is inherited from the HelpOnCells class and its only direct child is …\n"],["HelpOn2Cells","","HelpOn2Cells.html","","<p>Presentation\n<p>The HelpOn2Cells class is an abstract class inherited from HelpOnCells. Its direct children …\n"],["HelpOn3Cells","","HelpOn3Cells.html","","<p>Presentation\n<p>The HelpOn3Cells class is an abstract class inherited from HelpOnCells. Its direct child …\n"],["HelpOnACellTouchATent","","HelpOnACellTouchATent.html","","<p>Presentation\n<p>The HelpOnACellTouchATent class is inherited from the HelpOn2Cells abstract class. It shows …\n"],["HelpOnAColumn","","HelpOnAColumn.html","","<p>Presentation\n<p>The HelpOnAColumn abstract class is inherited from the HelpOnRowsAndColumn abstract class …\n"],["HelpOnCells","","HelpOnCells.html","","<p>Presentation\n<p>The HelpOnCells class is inherited from the Help class and its direct children are HelpOn1Cell …\n"],["HelpOnRowsAndColumn","","HelpOnRowsAndColumn.html","","<p>Presentation\n<p>The HelpOnRowsAndColumn abstract class is inherited from the Help class and its direct children …\n"],["HelpOneRow","","HelpOneRow.html","","<p>Presentation\n<p>The HelpOneRow abstract class is inherited from the HelpOnRowsAndColumn abstract class and …\n"],["HelpUi","","HelpUi.html","","<p>@Author: Corentin Petit &lt;zeigon&gt; @Date:   18-Mar-2019 @Email:  corentin.petit.etu@univ-lemans.fr …\n"],["Helper","","Helper.html","","<p>Presentation\n<p>The Helper class is a helper class inherited from FictivHelper it&#39;s role is to help you …\n"],["HelpsOn2CellTentUniqueSolution","","HelpsOn2CellTentUniqueSolution.html","","<p>Presentation\n<p>The HelpsOn2CellTentUniqueSolution class is inherited from the HelpOn2Cells abstract class. …\n"],["HelpsOn2CellsGrassLinkedTree","","HelpsOn2CellsGrassLinkedTree.html","","<p>Presentation\n<p>The HelpsOn2CellsGrassLinkedTree class is inherited from the HelpOn2Cells abstract class. …\n"],["HelpsOnACellIsTentBecauseOfTree","","HelpsOnACellIsTentBecauseOfTree.html","","<p>Presentation\n<p>The HelpsOnACellIsTentBecauseOfTree class is inherited from the HelpOn2Cells abstract class. …\n"],["HelpsOnACellOverlap","","HelpsOnACellOverlap.html","","<p>Presentation\n<p>The HelpsOnACellOverlap class is inherited from the HelpOn3Cells abstract class. This class …\n"],["HighScore","","HighScore.html","","<p>Presentation\n<p>The HighScore class is here to represent a high score in the database.\n<p>Variables\n"],["HighScoresScreen","","HighScoresScreen.html","","<p>Presentation\n<p>HighScoresScreen is an inherited class from the Screen class. This class only needs to be …\n"],["IconAsset","","IconAsset.html","","<p>Presentation\n<p>Star only needs to be initialized. It load all the icon.\n"],["LevelNumber","","LevelNumber.html","","\n<pre>===== Presentation</pre>\n<p>LevelNumber only needs to be initialized and refresh. It creates and implements the …\n"],["LevelNumbers","","LevelNumbers.html","","\n<pre>===== Presentation</pre>\n<p>LevelNumbers only needs to be initialized and refresh. It creates and implements all …\n"],["LevelSelectionScreen","","LevelSelectionScreen.html","","\n<pre>===== Presentation</pre>\n<p>LevelSelectionScreen is an inherited class from the Screen class. This class only needs …\n"],["Levels","","Levels.html","","<p>Presentation\n<p>The Levels class is use to know all levels particularity. Also to do all the operation in …\n"],["LoadingScreen","","LoadingScreen.html","",""],["MotdepasseOublie","","MotdepasseOublie.html","","\n<pre>===== Presentation</pre>\n<p>MotdepasseOublie only needs to be initialized. It creates and implements a pop up to …\n"],["Moves","","Moves.html","","<p>This class manages all the moves within the game, epecially the undo/redo function. Its methods are undo, …\n"],["Object","","Object.html","",""],["ParametreScreen","","ParametreScreen.html","","<p>Presentation\n<p>ParametreScreen is an inherited class from the Screen class. This class only needs to be …\n"],["PauseScreen","","PauseScreen.html","",""],["Player","","Player.html","","<p>Presentation\n<p>The Player class is here to represent a Player in the database.\n<p>Variables\n"],["PrincipalScreen","","PrincipalScreen.html","","<p>Presentation\n<p>PrincipalScreen is an inherited class from the Screen class. This class only needs to be …\n"],["Probleme","","Probleme.html","","\n<pre>===== Presentation</pre>\n<p>Probleme only needs to be initialized. It creates and implements a pop up to tell you …\n"],["ProblemeIdent","","ProblemeIdent.html","","\n<pre>===== Presentation</pre>\n<p>ProblemeIdent only needs to be initialized. It creates and implements a pop up to tell …\n"],["ProcessStatus","","ProcessStatus.html","","<p>@Author: Corentin Petit &lt;CorentinPetit&gt; @Date:   09-Feb-2019 @Email:  corentin.petit.etu@univ-lemans.fr …\n"],["QuickPlaySession","","QuickPlaySession.html","",""],["RowsAndColumnsFindGrass","","RowsAndColumnsFindGrass.html","","<p>Presentation\n<p>The RowsAndColumnsFindGrass class is a helper class inherited from FictivHelper. Its role …\n"],["RowsAndColumnsFindTent","","RowsAndColumnsFindTent.html","","<p>Presentation\n<p>The RowsAndColumnsFindTent class is a helper class inherited from FictivHelper. Its role …\n"],["RowsAndColumnsGrassHelper","","RowsAndColumnsGrassHelper.html","","<p>Presentation\n<p>The RowsAndColumnsGrassHelper class is a helper class inherited from FictivHelper. Its role …\n"],["RowsAndColumnsTentsHelper","","RowsAndColumnsTentsHelper.html","","<p>Presentation\n<p>The RowsAndColumnsTentsHelper class is a helper class inherited from FictivHelper. Its role …\n"],["RuleScreen","","RuleScreen.html","","<p>Presentation\n<p>RuleScreen is an inherited class from the Screen class. This class only needs to be initialized …\n"],["Save","","Save.html","",""],["SaveBlockUi","","SaveBlockUi.html","","<p>Presentation\n<p>SaveblockUi is an inherited class from the gtkBox. It creates and implements the save block …\n"],["SaveDB","","SaveDB.html","","<p>Presentation\n<p>The SaveDB class is here to represent a Save in the database.\n<p>Variables\n"],["SaveScreen","","SaveScreen.html","","<p>Presentation\n<p>SaveScreen is an inherited class from the Screen class. This class only needs to be initialized. …\n"],["Screen","","Screen.html","",""],["ScrollableArea","","ScrollableArea.html","","<p>Presentation\n<p>This class creates and implements a scrollable area in a page.\n<p>Methods\n"],["SelectionUi","","SelectionUi.html","","<p>@Author: Corentin Petit &lt;CorentinPetit&gt; @Date:   08-Feb-2019 @Email:  corentin.petit.etu@univ-lemans.fr …\n"],["Session","","Session.html","","<p>@Author: Corentin Petit &lt;zeigon&gt; @Date:   01-Mar-2019 @Email:  corentin.petit.etu@univ-lemans.fr …\n"],["Star","","Star.html","","<p>Presentation\n<p>Star only needs to be initialized and refresh. It creates and implements all the star&#39;s …\n"],["TestGame","","TestGame.html","","<p>&gt; Main\n<p>&gt; Generation de la fenetre de jeu\n"],["Text","","Text.html","",""],["TimeAttackSession","","TimeAttackSession.html","",""],["TutorialGameScreen","","TutorialGameScreen.html","","<p>Presentation\n<p>The Helper class is a helper class inherited from FictivHelper it&#39;s role is to help you …\n"],["TutorialSession","","TutorialSession.html","",""],["TutorialVictoryScreen","","TutorialVictoryScreen.html","",""],["UiManager","","UiManager.html","","<p>@Author: Corentin Petit &lt;zeigon&gt; @Date:   01-Mar-2019 @Email:  corentin.petit.etu@univ-lemans.fr …\n"],["VictoryScreen","","VictoryScreen.html","",""],["XmlReader","","XmlReader.html","","<p>Presentation\n<p>The XmlReader class is here to read every necessary information inside the XML file. The …\n"],["==","Cell","Cell.html#method-i-3D-3D","(otherCell)","<p>The == method is used to compare two cells, it returns true if the cells&#39; states are equal.\n<p>Parameter …\n"],["==","Grid","Grid.html#method-i-3D-3D","(otherGrid)","<p>The == boolean method compares two grids and returns true if the grids are equal.\n<p>Parameters\n<p><code>otherGrid</code> …\n"],["==","Help","Help.html#method-i-3D-3D","(otherHelp)","<p>This method is a redefinition of the == method.\n<p>Returns\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">return</span> (<span class=\"ruby-keyword\">self</span>.<span class=\"ruby-identifier\">class</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-identifier\">otherHelp</span>.<span class=\"ruby-identifier\">class</span>)\n</pre>\n"],["==","HelpCellsAndRowsOrColumns","HelpCellsAndRowsOrColumns.html#method-i-3D-3D","(otherHelp)","<p>This method is a redefinition of this method in the Help class.\n<p>Attributes\n<p><code>otherHelp</code> : The object we want …\n"],["==","HelpOn2Cells","HelpOn2Cells.html#method-i-3D-3D","(otherHelp)","<p>Presentation\n<p>The == method overrides the == method in HelpOnCells. It is here to compare this object with …\n"],["==","HelpOn3Cells","HelpOn3Cells.html#method-i-3D-3D","(otherHelp)","<p>Presentation\n<p>The == method overrides the == method in HelpOnCells. It is here to compare this object with …\n"],["==","HelpOnCells","HelpOnCells.html#method-i-3D-3D","(otherHelp)","<p>This method compares this help with another one.\n<p>Parameters\n<p><code>otherHelp</code> : The help we want to compare the …\n"],["==","HelpOnRowsAndColumn","HelpOnRowsAndColumn.html#method-i-3D-3D","(otherHelp)","<p>Presentation\n<p>The == method compares this help with another one.\n<p>Parameters\n"],["activateHelp","ClueUi","ClueUi.html#method-i-activateHelp","(bool)",""],["add","Moves","Moves.html#method-i-add","(move)","<p>Adds a move to the “moves” stack and clears redo stack.\n<p><strong>Arguments</strong> :\n<p><code>move</code> -&gt; the move to add. …\n"],["add","ProcessStatus","ProcessStatus.html#method-c-add","(o)",""],["add","ScrollableArea","ScrollableArea.html#method-i-add","(widget,pad=0)","<p>Presentation\n<p>This method will add a widget to the scrollable area.\n<p>Attributes\n"],["addHighScore","ConnectDB","ConnectDB.html#method-i-addHighScore","(gameMode, difficulty, player, score)","<p>Presentation\n<p>When the player has not already done a high score in the given game mode and difficulty this …\n"],["addmove","Game","Game.html#method-i-addmove","(move,triRotative=true)",""],["addmove","Guess","Guess.html#method-i-addmove","(move)",""],["apply","Text","Text.html#method-i-apply","()",""],["applyAsset","CellUi","CellUi.html#method-i-applyAsset","(asset)",""],["applyOn","AdventureVictoryScreen","AdventureVictoryScreen.html#method-i-applyOn","(widget,sScore,isWon, associatedTimer)",""],["applyOn","Asset","Asset.html#method-i-applyOn","(widget)","<p>Presentation\n<p>The applyOn method puts an image on a widget.\n<p>Atrributes\n"],["applyOn","LevelSelectionScreen","LevelSelectionScreen.html#method-i-applyOn","(widget)","<p>Presentation\n<p>This method is used to refresh the page by calling the method refresh of the class LevelNumbers …\n"],["applyOn","Screen","Screen.html#method-i-applyOn","(widget)",""],["applyOn","TutorialVictoryScreen","TutorialVictoryScreen.html#method-i-applyOn","(widget,sScore,isWon)",""],["applyOn","VictoryScreen","VictoryScreen.html#method-i-applyOn","(widget,sScore,isWon, associatedTimer =0)",""],["beginDrag","GridUi","GridUi.html#method-i-beginDrag","(cell, click)",""],["beginGuess","Game","Game.html#method-i-beginGuess","()",""],["biRotative?","Cell","Cell.html#method-i-biRotative-3F","()","<p>The biRotative? is an alias method to the isATree? method. It returns true if the cell&#39;s state is …\n"],["buttonMaxString","XmlReader","XmlReader.html#method-i-buttonMaxString","(currentScreen)","<p>The buttonMaxString method returns the length of the longest label of a button in a screen.\n"],["calculateOverallStars","AdventureSession","AdventureSession.html#method-i-calculateOverallStars","()","<p>Presentation\n<p>This method is used when the player ends a game. This is used to calculate the overallstars …\n"],["calculateOverallStars","Levels","Levels.html#method-i-calculateOverallStars","(overAllStarsHash)","<p>Presentation\n<p>This method is used when the player end a game. This is use to calculate the overallstars …\n"],["calculateScore","AdventureSession","AdventureSession.html#method-i-calculateScore","(score)","<p>Presentation\n<p>This method is used when the player ends a game. This is used to calculate the score with …\n"],["calculateScore","Game","Game.html#method-i-calculateScore","()",""],["calculateScore","Levels","Levels.html#method-i-calculateScore","(scoreMultiplier, numberOfGrid,score)","<p>Presentation\n<p>This method is used when the player end a game. This is use to calculate the score with the …\n"],["calculateScore","QuickPlaySession","QuickPlaySession.html#method-i-calculateScore","()",""],["calculateScore","Session","Session.html#method-i-calculateScore","()",""],["calculateScore","TimeAttackSession","TimeAttackSession.html#method-i-calculateScore","()",""],["calculateScore","TutorialSession","TutorialSession.html#method-i-calculateScore","()",""],["calculateStars","AdventureSession","AdventureSession.html#method-i-calculateStars","()","<p>Presentation\n<p>This method is used when the player ends a game. This is used to calculate the number of …\n"],["calculateStars","Levels","Levels.html#method-i-calculateStars","(score, maxStars,overAllStarsHash,levelNumber)","<p>Presentation\n<p>This method is used when the player end a game. This is use to calculate the number of stars …\n"],["cellAsset","CellAssets","CellAssets.html#method-i-cellAsset","(state=:white,variation=-1,frozen=false)","<p>@buttons …\n"],["cellAssetGlowing","CellAssets","CellAssets.html#method-i-cellAssetGlowing","(state,variation=-1,frozen=false)",""],["cellAssetSelected","CellAssets","CellAssets.html#method-i-cellAssetSelected","(state,variation=-1,frozen=false)",""],["cellAt","Game","Game.html#method-i-cellAt","(row, col)",""],["cellAt","Grid","Grid.html#method-i-cellAt","(row, col)","<p>The cellAt method returns the cell with the coordinates taken in parameters.\n<p><code>row</code> - The row in which the …\n"],["cellAt","Guess","Guess.html#method-i-cellAt","(row, col)",""],["cellsFromFirstToEnd","GridUi","GridUi.html#method-i-cellsFromFirstToEnd","()",""],["cellsList","Help","Help.html#method-i-cellsList","(helpLevel)","<p>This method returns an array with all the important cells for the help.\n"],["cellsList","HelpCellsAndColumns","HelpCellsAndColumns.html#method-i-cellsList","(helpLevel)","<p>The cellsList method is a redefinition from the Help class.\n<p>Attributes\n<p><code>helpLevel</code> : The help&#39;s importance …\n"],["cellsList","HelpCellsAndRows","HelpCellsAndRows.html#method-i-cellsList","(helpLevel)","<p>This method overrides the cellsList method from the HelpCellsAndRowsOrColumns class.\n<p>Attributes\n<p><code>helpLevel</code> …\n"],["cellsList","HelpCellsAndRowsOrColumns","HelpCellsAndRowsOrColumns.html#method-i-cellsList","(helpLevel)","<p>The cellsList method is a redefinition from cellsList method in the Help class.\n<p>Attributes\n<p><code>helpLevel</code> : …\n"],["cellsList","HelpOn2Cells","HelpOn2Cells.html#method-i-cellsList","(helpLevel)","<p>Presentation\n<p>The cellsList method from this class overrides this method from the HelpOnCells class.\n<p>Attributes …\n"],["cellsList","HelpOn3Cells","HelpOn3Cells.html#method-i-cellsList","(helpLevel)","<p>Presentation\n<p>The cellsList method from this class overrides this method from the HelpOnCells class.\n<p>Attributes …\n"],["cellsList","HelpOnAColumn","HelpOnAColumn.html#method-i-cellsList","(helpLevel)","<p>Presentation\n<p>The cellsList method from this class overrides this method from the HelpOnRowsAndColumn class. …\n"],["cellsList","HelpOnCells","HelpOnCells.html#method-i-cellsList","(helpLevel)","<p>This method adds to the help list the value of the cell.\n<p>Parameters\n<p><code>helpLevel</code> : The help&#39;s importance …\n"],["cellsList","HelpOneRow","HelpOneRow.html#method-i-cellsList","(helpLevel)","<p>Presentation\n<p>The cellsList method from this class overrides this method from the HelpOnRowsAndColumn class. …\n"],["clean","HelpUi","HelpUi.html#method-i-clean","()",""],["clearHelper","Game","Game.html#method-i-clearHelper","()",""],["clearRedo","Moves","Moves.html#method-i-clearRedo","()","<p>Clears the redo stack.\n"],["clickdefined?","GridUi","GridUi.html#method-i-clickdefined-3F","()",""],["colorChange","Text","Text.html#method-i-colorChange","(couleur)",""],["compresse","CompresseGrid","CompresseGrid.html#method-c-compresse","(game)","<p>Presentation\n<p>This class methode count the number of cell who are in a certain state inside a row or column. …\n"],["continuable?","AdventureSession","AdventureSession.html#method-i-continuable-3F","()","<p>Presentation\n<p>This method is used to know if a level can be continued.\n<p>Returns\n"],["continuable?","Levels","Levels.html#method-i-continuable-3F","(numberOfGrid)","<p>Presentation\n<p>This method is used to know if a level is continuable.\n<p>Returns\n"],["continuable?","Session","Session.html#method-i-continuable-3F","()",""],["continuable?","TimeAttackSession","TimeAttackSession.html#method-i-continuable-3F","()",""],["continuable?","TutorialSession","TutorialSession.html#method-i-continuable-3F","()",""],["coords","CellUi","CellUi.html#method-i-coords","()",""],["copyFrozen","Grid","Grid.html#method-i-copyFrozen","()","<p>The copyFrozen method creates a new grid that will have all the non-white cells frozen in order to save …\n"],["coreCell","CellUi","CellUi.html#method-i-coreCell","()",""],["coreCellAt","GridUi","GridUi.html#method-i-coreCellAt","(row, col)",""],["count","ClueUi","ClueUi.html#method-i-count","(state)",""],["count","Count","Count.html#method-c-count","(game, state, vertHor, rank)","<p>Presentation\n<p>This class methode count the number of cell who are in a certain state inside a row or column. …\n"],["createNewSave","UiManager","UiManager.html#method-i-createNewSave","()",""],["createPlayer","ConnectDB","ConnectDB.html#method-i-createPlayer","(name, password)","<p>Presentation\n<p>This method adds a player in the database with the name and the password provided. The game …\n"],["createSave","Session","Session.html#method-i-createSave","()",""],["deletePlayer","ConnectDB","ConnectDB.html#method-i-deletePlayer","(id)","<p>Presentation\n<p>This method deletes a player in the database with the ID of the player. The game must be …\n"],["deletePlayerHg","ConnectDB","ConnectDB.html#method-i-deletePlayerHg","(id)","<p>Presentation\n<p>This method deletes a player&#39;s highscore in the database with the ID of the player.  …\n"],["deletePlayerSave","ConnectDB","ConnectDB.html#method-i-deletePlayerSave","(id)","<p>Presentation\n<p>This method deletes all of the player&#39;s saves in the database with the ID of the player. …\n"],["deleteSave","ConnectDB","ConnectDB.html#method-i-deleteSave","(id)","<p>Presentation\n<p>This method deletes a Save in the database with the ID of the Save. The game must be connected …\n"],["deleteSave","Session","Session.html#method-i-deleteSave","()",""],["destroy","Save","Save.html#method-i-destroy","()",""],["dragLeftChange","Cell","Cell.html#method-i-dragLeftChange","()","<p>The dragLeftChange method is a boolean method that returns false if the cell is frozen. If not, the cell&#39;s …\n"],["dragLeftClicked","CellUi","CellUi.html#method-i-dragLeftClicked","()",""],["dragable?","CellUi","CellUi.html#method-i-dragable-3F","()",""],["draged?","GridUi","GridUi.html#method-i-draged-3F","()",""],["each","Grid","Grid.html#method-i-each","()","<p>The each method goes through the grid&#39;s rows.\n"],["find","FindWhiteZone","FindWhiteZone.html#method-c-find","(game, vertHor, rank)","<p>Presentation\n<p>This class method is used in order to help the other help classes by finding white cells …\n"],["findFirst","Count","Count.html#method-c-findFirst","(game, state, vertHor, rank)","<p>Presentation\n<p>This class methode find the first cell who is in a certain state inside a row or column. …\n"],["frozenOf","Cell","Cell.html#method-i-frozenOf","(cell)","<p>This method returns the frozen state of a cell.\n<p>Parameter\n<p><code>cell</code> - The cell we want to get the frozen state …\n"],["getButtonLabel","XmlReader","XmlReader.html#method-i-getButtonLabel","(currentScreen, key)","<p>Presentation\n<p>The getButtonLabel method fetches the label of a button according to the current screen and …\n"],["getHelpsTexts","XmlReader","XmlReader.html#method-i-getHelpsTexts","(help, helpLevel, delimiterPosition)","<p>Presentation\n<p>The getHelpTexts method fetches a text according to a key and the position of a delimiter …\n"],["getHighScoresByGamemodeDiff","ConnectDB","ConnectDB.html#method-i-getHighScoresByGamemodeDiff","(gamemode, difficulty)","<p>Presentation\n<p>This method retrieves the high scores by game mode and difficulty. The game must be connected …\n"],["getImage","Diapo","Diapo.html#method-i-getImage","()",""],["getLanguages","XmlReader","XmlReader.html#method-i-getLanguages","()",""],["getLevel","AdventureSession","AdventureSession.html#method-i-getLevel","(lvlNumber)","<p>Presentation\n<p>This method is used when the player wants to play a level in the adventure.\n<p>Attributes\n"],["getLevel","Levels","Levels.html#method-i-getLevel","(level)","<p>Presentation\n<p>This method is used when the player wants to play a level in the adventure.\n<p>Attributes\n"],["getLevelInformation","AdventureSession","AdventureSession.html#method-i-getLevelInformation","(lvlNumber)","<p>Presentation\n<p>This method is used when the player wants to play a level in the adventure. This is here …\n"],["getLevelMaxStars","Levels","Levels.html#method-i-getLevelMaxStars","(lvl)","<p>Presentation\n<p>This method is used to know the maximal number of stars for a level.\n<p>Attributes\n"],["getLoadingMessages","XmlReader","XmlReader.html#method-i-getLoadingMessages","(key)","<p>The getLoadingMessages method fetches a loading text message according to the key\n"],["getPlayer","ConnectDB","ConnectDB.html#method-i-getPlayer","(id)","<p>Presentation\n<p>This method retrieves the Player that matches the given id. The game must be connected to …\n"],["getPlayerHighScoreByGamemodeDiff","ConnectDB","ConnectDB.html#method-i-getPlayerHighScoreByGamemodeDiff","(gamemode, difficulty, player)","<p>Presentation\n<p>This method retrieves the high score by game mode and difficulty made by a given player. …\n"],["getPlayersSave","ConnectDB","ConnectDB.html#method-i-getPlayersSave","(player)","<p>Presentation\n<p>This method retrieves all the saves created by the Player. The game must be connected to …\n"],["getRes","Help","Help.html#method-i-getRes","(helpLevel)","<p>This method returns the UI printable form of the help.\n"],["getRules","XmlReader","XmlReader.html#method-i-getRules","(number)",""],["getSaveByID","ConnectDB","ConnectDB.html#method-i-getSaveByID","(id)","<p>Presentation\n<p>This method retrieves the save from the provided ID. The game must be connected to the database. …\n"],["getScreenTexts","XmlReader","XmlReader.html#method-i-getScreenTexts","(currentScreen, key)","<p>Presentation\n<p>The getScreentexts method fetches a text according to the current screen and its key.\n<p>Attributes …\n"],["getText","Help","Help.html#method-i-getText","(helpLevel)","<p>This method fetches the help text for a given help level. It is used to initialize the @helpText variable …\n"],["getText","HelpAllGrassOnAColumn","HelpAllGrassOnAColumn.html#method-i-getText","(helpLevel)","<p>Presentation\n<p>This method fetches the text from the XML file to show the help text.\n<p>Parameters\n"],["getText","HelpAllGrassOnARow","HelpAllGrassOnARow.html#method-i-getText","(helpLevel)","<p>Presentation\n<p>This method fetches the text from the XML file to show the help text.\n<p>Parameters\n"],["getText","HelpAllPossibilitiesGiveItColumn","HelpAllPossibilitiesGiveItColumn.html#method-i-getText","(helpLevel)","<p>The getText method sends the help text the player will see.\n<p>Attributes\n<p><code>helpLevel</code> : Depending on this attribute, …\n"],["getText","HelpAllPossibilitiesGiveItRow","HelpAllPossibilitiesGiveItRow.html#method-i-getText","(helpLevel)","<p>The getText method sends the help text the player will see. It returns the helpText variable that changes …\n"],["getText","HelpAllTentsOnAColumn","HelpAllTentsOnAColumn.html#method-i-getText","(helpLevel)","<p>Presentation\n<p>This method fetches the text from the XML file to show the help text.\n<p>Parameters\n"],["getText","HelpAllTentsOnARow","HelpAllTentsOnARow.html#method-i-getText","(helpLevel)","<p>Presentation\n<p>This method fetches the text from the XML file to show the help text.\n<p>Parameters\n"],["getText","HelpCellTooFarOfTrees","HelpCellTooFarOfTrees.html#method-i-getText","(helpLevel)","<p>Presentation\n<p>The getText method returns the help text saying that the cell must be grass. This text is …\n"],["getText","HelpNotFound","HelpNotFound.html#method-i-getText","(helpLevel)","<p>This method is a redefinition of the getText method in the Help class.\n<p>Returns\n<p>It returns a text saying …\n"],["getText","HelpOnACellTouchATent","HelpOnACellTouchATent.html#method-i-getText","(helpLevel)","<p>Presentation\n<p>This method fetches the text from the XML file to show the help text.\n<p>Parameters\n"],["getText","HelpsOn2CellTentUniqueSolution","HelpsOn2CellTentUniqueSolution.html#method-i-getText","(helpLevel)","<p>Presentation\n<p>This method fetches the text from the XML file to show the help text.\n<p>Parameters\n"],["getText","HelpsOn2CellsGrassLinkedTree","HelpsOn2CellsGrassLinkedTree.html#method-i-getText","(helpLevel)","<p>Presentation\n<p>This method fetches the text from the XML file to show the help text.\n<p>Parameters\n"],["getText","HelpsOnACellIsTentBecauseOfTree","HelpsOnACellIsTentBecauseOfTree.html#method-i-getText","(helpLevel)","<p>Presentation\n<p>This method fetches the text from the XML file to show the help text.\n<p>Parameters\n"],["getText","HelpsOnACellOverlap","HelpsOnACellOverlap.html#method-i-getText","(helpLevel)","<p>Presentation\n<p>This method fetches the text from the XML file to show the help text.\n<p>Parameters\n"],["getTutorialTexts","XmlReader","XmlReader.html#method-i-getTutorialTexts","(currentLevel, step)","<p>Presentation\n<p>The getTutorialTexts method fetches a text according to the current tutorial level and its …\n"],["getVictoryScreen","UiManager","UiManager.html#method-i-getVictoryScreen","(session)",""],["glowing","CellUi","CellUi.html#method-i-glowing","()",""],["gridAltered","GameScreen","GameScreen.html#method-i-gridAltered","()",""],["help","AllTreesHaveTentsHelper","AllTreesHaveTentsHelper.html#method-i-help","(game)","<p>Presentation\n<p>This method tries to create network of tent an tree in order to find the emplacement of an …\n"],["help","CellDontTouchTreeHelper","CellDontTouchTreeHelper.html#method-i-help","(game)","<p>Presentation\n<p>This method tries to find a cell that is not touched by a tree.\n<p>Attributes\n"],["help","CellTouchATentHelper","CellTouchATentHelper.html#method-i-help","(game)","<p>Presentation\n<p>This method tries to find a cell touched by a tent.\n<p>Attributes\n"],["help","CellWhiteOverlap","CellWhiteOverlap.html#method-i-help","(game)","<p>Presentation\n<p>This method find tree and check if they have only two positions for it&#39;s tent and if …\n"],["help","FictivHelper","FictivHelper.html#method-i-help","(game)","<p>Presentation\n<p>This method help the player but need to be definded in the helper class.\n<p>Attributes\n"],["help","Game","Game.html#method-i-help","()",""],["help","RowsAndColumnsFindGrass","RowsAndColumnsFindGrass.html#method-i-help","(game)","<p>Presentation\n<p>This method tries to find a cell whitch is grass beacause of its row/column, or a near one. …\n"],["help","RowsAndColumnsFindTent","RowsAndColumnsFindTent.html#method-i-help","(game)","<p>Presentation\n<p>This method tries to find a cell whitch is a tent because of its row/column, or a near one. …\n"],["help","RowsAndColumnsGrassHelper","RowsAndColumnsGrassHelper.html#method-i-help","(game)","<p>Presentation\n<p>This method tries to find whitch row or column you can fill with grass.\n<p>Attributes\n"],["help","RowsAndColumnsTentsHelper","RowsAndColumnsTentsHelper.html#method-i-help","(game)","<p>Presentation\n<p>This method tries to find whitch row or column you can fill with tents.\n<p>Attributes\n"],["helpDisplayed?","GameScreen","GameScreen.html#method-i-helpDisplayed-3F","()",""],["helpFound?","Help","Help.html#method-i-helpFound-3F","()","<p>This tries to find the necessary help.\n<p>Returns\n<p>Returns true if help has been found, else it returns false. …\n"],["helpFound?","HelpNotFound","HelpNotFound.html#method-i-helpFound-3F","()","<p>This method is a redefinition of the helpFound? method in the Help class.\n<p>Returns\n<p>It returns false because …\n"],["hide","TestGame","TestGame.html#method-c-hide","()",""],["hover","GridUi","GridUi.html#method-i-hover","(cell)",""],["initGtkGrid","GridUi","GridUi.html#method-i-initGtkGrid","()",""],["initLevel","Levels","Levels.html#method-i-initLevel","(level)","<p>Presentation\n<p>This method is used when the player wants to play a level in the adventure.\n<p>Attributes\n"],["isAGrass?","Cell","Cell.html#method-i-isAGrass-3F","()","<p>The isAGrass? method returns true if the cell&#39;s state is grass.\n"],["isATent?","Cell","Cell.html#method-i-isATent-3F","()","<p>The isATent? method returns true if the cell&#39;s state is a tent.\n"],["isATree?","Cell","Cell.html#method-i-isATree-3F","()",""],["isAWhite?","Cell","Cell.html#method-i-isAWhite-3F","()","<p>The isAWhite? method returns true if the cell&#39;s state is white.\n"],["isPlayerExist","ConnectDB","ConnectDB.html#method-i-isPlayerExist","(name)","<p>Presentation\n<p>This method checks if the name of the Player already exists in the database The game must …\n"],["isTutorial?","QuickPlaySession","QuickPlaySession.html#method-i-isTutorial-3F","()",""],["isTutorial?","Session","Session.html#method-i-isTutorial-3F","()",""],["isTutorial?","TimeAttackSession","TimeAttackSession.html#method-i-isTutorial-3F","()",""],["isTutorial?","TutorialSession","TutorialSession.html#method-i-isTutorial-3F","()",""],["leftClicked","CellUi","CellUi.html#method-i-leftClicked","()",""],["leftClicked","GridUi","GridUi.html#method-i-leftClicked","()","<p>called when a left click occur on the grid\n"],["leftClickedDraged","GridUi","GridUi.html#method-i-leftClickedDraged","()","<p>called when a draged left click occur on the grid\n"],["load","Save","Save.html#method-c-load","(id)",""],["load","Save","Save.html#method-i-load","()",""],["lvlAvailable?","AdventureSession","AdventureSession.html#method-i-lvlAvailable-3F","(lvl)","<p>Presentation\n<p>This method is used to know if a player can access a level.\n<p>Returns\n"],["lvlAvailable?","Levels","Levels.html#method-i-lvlAvailable-3F","(lvl, overAllStars)","<p>Presentation\n<p>This method is used to know if a player can access a level.\n<p>Attributes\n"],["manageHelp","Game","Game.html#method-i-manageHelp","( min, max)",""],["moves","Guess","Guess.html#method-i-moves","()",""],["new","AdventureSession","AdventureSession.html#method-c-new","()","<p>Presentation\n<p>This class&#39; constructor calls the inherited constructor from Session and defines the …\n"],["new","AdventureVictoryScreen","AdventureVictoryScreen.html#method-c-new","(manager,session)",""],["new","Asset","Asset.html#method-c-new","(file)","<p>Presentation\n<p>The class&#39; initializer.\n<p>Attributes\n"],["new","Button","Button.html#method-c-new","(orientation, label)","<p>Presentation\n<p>This method initializes the button&#39;s variables in order to act properly.\n<p>Attributes\n"],["new","Cell","Cell.html#method-c-new","(args={state: :white, frozen: false, row: 0, column: 0})","<p>Parameters\n\n<pre>def initialize(args={state: :white, frozen: false, row: 0, column: 0})</pre>\n<p><code>state</code> - The cell&#39;s …\n"],["new","CellAsset","CellAsset.html#method-c-new","(file,nRows, nCols)",""],["new","CellAssets","CellAssets.html#method-c-new","(nRows, nCols)","<p>@buttons …\n"],["new","CellUi","CellUi.html#method-c-new","(parent, row, col, assets)",""],["new","ChronoUi","ChronoUi.html#method-c-new","(time)","<p>Presentation\n<p>The initialization method creates a new button with specific values for the chronometer&#39;s …\n"],["new","ClueUi","ClueUi.html#method-c-new","(orientation, label, index, game)",""],["new","ConnectDB","ConnectDB.html#method-c-new","()","<p>Presentation\n<p>This class&#39; constructor initializes the db variable with the database in order to connect …\n"],["new","Diapo","Diapo.html#method-c-new","(width , height, textManager,ic)",""],["new","Difficulty","Difficulty.html#method-c-new","(id, name)","<p>Presentation\n<p>The class&#39; constructor. It only gives the variables the value taken in parameters.\n<p>Attributes …\n"],["new","Game","Game.html#method-c-new","(session)",""],["new","GameDivised","GameDivised.html#method-c-new","(game)","<p>Presentation\n<p>This class&#39; constructor initializes the tree, tent, grass and white variables with the …\n"],["new","GameScreen","GameScreen.html#method-c-new","(manager,game,cellAssets,victoryScreen)",""],["new","Gamemode","Gamemode.html#method-c-new","(id, name)","<p>Presentation\n<p>The class&#39; constructor. It only gives the id and name variables their value, taken from …\n"],["new","Grid","Grid.html#method-c-new","(nRow, nCol, gridAnswers, withAnswers=false)","<p>Parameters\n<p><code>nRow</code> - The number of rows\n<p><code>nCol</code> - The number of columns\n"],["new","GridGenerator","GridGenerator.html#method-c-new","(difficulty =:random)",""],["new","GridUi","GridUi.html#method-c-new","(game, assets, parent)","<p>creation of a new grid UI @param game the current game\n"],["new","Guess","Guess.html#method-c-new","(grid, prev = nil)",""],["new","Help","Help.html#method-c-new","()","<p>The class&#39; constructor. This method takes no parameters and initializes two variables :\n<p><code>price</code> : An …\n"],["new","HelpAllPossibilitiesGiveItColumn","HelpAllPossibilitiesGiveItColumn.html#method-c-new","(cell, column, state)","<p>The initialize method gives to the state variable a value from the method&#39;s parameters and initializes …\n"],["new","HelpAllPossibilitiesGiveItRow","HelpAllPossibilitiesGiveItRow.html#method-c-new","(cell, row, state)","<p>The initialize method gives to the state variable a value from the method&#39;s parameters and initializes …\n"],["new","HelpCellTooFarOfTrees","HelpCellTooFarOfTrees.html#method-c-new","(cell)","<p>The initialize method just calls the initialize method from HelpOn1Cell with the cell taken in parameters. …\n"],["new","HelpCellsAndColumns","HelpCellsAndColumns.html#method-c-new","(cell, column)","<p>This method only does what the initialize method in HelpCellsAndRowsOrColumns does, but with a column …\n"],["new","HelpCellsAndRows","HelpCellsAndRows.html#method-c-new","(cell, row)","<p>This method only does what the initialize method in HelpCellsAndRowsOrColumns does, but with a row instead …\n"],["new","HelpCellsAndRowsOrColumns","HelpCellsAndRowsOrColumns.html#method-c-new","(cell, rowOrColumn)","<p>This class&#39; constructor needs 2 attributes and instanciates 3 variables.\n<p>Attributes\n<p><code>cell</code> - A cell we …\n"],["new","HelpNotFound","HelpNotFound.html#method-c-new","()","<p>The class&#39; constructor. This method takes no parameters and initializes two variables :\n<p><code>price</code> : An …\n"],["new","HelpNotFound","HelpNotFound.html#method-c-new","()",""],["new","HelpOn2Cells","HelpOn2Cells.html#method-c-new","(cell1, cell2)","<p>Presentation\n<p>This class&#39; constructor initializes the two variables taken in attributes as described …\n"],["new","HelpOn3Cells","HelpOn3Cells.html#method-c-new","(cell1, cell2, cell3)","<p>Presentation\n<p>This class&#39; constructor initializes the three variables taken in attributes as described …\n"],["new","HelpOnACellTouchATent","HelpOnACellTouchATent.html#method-c-new","(cell, tentCell)","<p>Presentation\n<p>The class&#39; constructor that is here to initialize the two variables taken in parameters …\n"],["new","HelpOnCells","HelpOnCells.html#method-c-new","(cell)","<p>This class&#39; constructor assigns a value to the @cell variable and calls constructor from the Help …\n"],["new","HelpOnRowsAndColumn","HelpOnRowsAndColumn.html#method-c-new","(rowOrColumn)","<p>Presentation\n<p>This class&#39; constructor assigns a value to the @column and @row variables and calls the …\n"],["new","HelpUi","HelpUi.html#method-c-new","()",""],["new","HelpsOn2CellTentUniqueSolution","HelpsOn2CellTentUniqueSolution.html#method-c-new","(cellTent, cellTree)","<p>Presentation\n<p>The class&#39; constructor, it initializes each cell variable with the cell taken in parameters. …\n"],["new","HelpsOn2CellsGrassLinkedTree","HelpsOn2CellsGrassLinkedTree.html#method-c-new","(cellTent, cellTree)","<p>Presentation\n<p>The class&#39; constructor that is here to initialize the two variables taken in parameters …\n"],["new","HelpsOnACellIsTentBecauseOfTree","HelpsOnACellIsTentBecauseOfTree.html#method-c-new","(cellTent, cellTree)","<p>Presentation\n<p>The class&#39; constructor that is here to initialize the two variables taken in parameters …\n"],["new","HelpsOnACellOverlap","HelpsOnACellOverlap.html#method-c-new","(cellGrass, cellwhite1, cellwhite2)","<p>Presentation\n<p>The class&#39; constructor that is here to initialize the three variables taken in parameters …\n"],["new","HighScore","HighScore.html#method-c-new","(idDiff, player, score, idMode)","<p>Presentation\n<p>This is the class&#39; constructor, it only gives the variables their value taken from the …\n"],["new","HighScoresScreen","HighScoresScreen.html#method-c-new","(manager)","<p>Presentation\n<p>This method is used to create the high scores screen by calling the class ConnectDB. All …\n"],["new","IconAsset","IconAsset.html#method-c-new","()","<p>Presentation\n<p>This method is used to load all the icon by putting them in a hash table @iconAsset\n"],["new","LevelNumber","LevelNumber.html#method-c-new","(i,manager,adventure, adventureInfo,ic)","<p>Presentation\n<p>This method is used to create the level icon. An icon contain a level number icon from the …\n"],["new","LevelNumbers","LevelNumbers.html#method-c-new","(manager,adventure ,adventureInfo,ic)","<p>Presentation\n<p>This method is used to create all the levels icons by calling the class levelNumber All the …\n"],["new","LevelSelectionScreen","LevelSelectionScreen.html#method-c-new","(manager,ic)","<p>Presentation\n<p>This method is used to create the level selection by calling the class LevelNumbers. ALl …\n"],["new","Levels","Levels.html#method-c-new","()","<p>Presentation\n<p>This class constructor initialize a hash table levels wich conatain all the information of …\n"],["new","LoadingScreen","LoadingScreen.html#method-c-new","(manager)",""],["new","MotdepasseOublie","MotdepasseOublie.html#method-c-new","()","<p>Presentation\n<p>This method is used to create the pop up to redefine your password. All the other variable …\n"],["new","Moves","Moves.html#method-c-new","(moves = [])","<p>Creates a new Moves object.\n<p><strong>Arguments</strong> :\n<p><code>moves</code> -&gt; all the Moves (empty by default).\n"],["new","PauseScreen","PauseScreen.html#method-c-new","(gameScreen,manager,game)",""],["new","Player","Player.html#method-c-new","(id, name, password)","<p>Presentation\n<p>The class&#39; constructor. It only gives the variables their value taken from the parameters. …\n"],["new","Probleme","Probleme.html#method-c-new","()","<p>Presentation\n<p>This method is used to create the pop up to tell you the probleme about the identification. …\n"],["new","ProblemeIdent","ProblemeIdent.html#method-c-new","()","<p>Presentation\n<p>This method is used to create the pop up to tell you the probleme about the identification. …\n"],["new","ProcessStatus","ProcessStatus.html#method-c-new","()",""],["new","QuickPlaySession","QuickPlaySession.html#method-c-new","(difficulty, partOfAdventure=false)","<p>attr_writer :score\n"],["new","Save","Save.html#method-c-new","(session)",""],["new","SaveBlockUi","SaveBlockUi.html#method-c-new","(manager,save, parent)","<p>Presentation\n<p>This method is used to create the Save block. All save blocks contain a number of save, a …\n"],["new","SaveDB","SaveDB.html#method-c-new","(id, player, date, content)","<p>Presentation\n<p>The class&#39; constructor. It only gives the variables their value taken from the parameters. …\n"],["new","SaveScreen","SaveScreen.html#method-c-new","(manager,joueur)","<p>Presentation\n<p>This method is used to create the save screen by calling the class SaveBlockUi. A scrollable …\n"],["new","Screen","Screen.html#method-c-new","(parent)",""],["new","ScrollableArea","ScrollableArea.html#method-c-new","(orientation)","<p>Presentation\n<p>This method is used to create the scrollable area by using a viewport. All of the other variables …\n"],["new","SelectionUi","SelectionUi.html#method-c-new","()",""],["new","Session","Session.html#method-c-new","(gameMode, difficulty, partOfAdventure=false)","<p>attr_writer :score\n"],["new","Star","Star.html#method-c-new","(nbEtoile,nbEtoileObtenu,ic)","\n<pre>===== Presentation\nThis method is used to create all the star&#39;s icons.\nIcons are loaded thanks to iconAsset ...</pre>\n"],["new","TestGame","TestGame.html#method-c-new","()",""],["new","Text","Text.html#method-c-new","(label, size=Constants::BUTTON_SIZE)",""],["new","TimeAttackSession","TimeAttackSession.html#method-c-new","(difficulty, partOfAdventure=false)","<p>attr_writer :score\n"],["new","TutorialSession","TutorialSession.html#method-c-new","()","<p>attr_writer :score\n"],["new","TutorialVictoryScreen","TutorialVictoryScreen.html#method-c-new","(manager,session)",""],["new","UiManager","UiManager.html#method-c-new","(window,player)",""],["new","VictoryScreen","VictoryScreen.html#method-c-new","(manager,session)",""],["new","XmlReader","XmlReader.html#method-c-new","()","<p>Presentation\n<p>The initialization method reads the XML document, which is converted into a HashTable indented …\n"],["next","Guess","Guess.html#method-i-next","()",""],["nextImage","Diapo","Diapo.html#method-i-nextImage","()",""],["normal","CellUi","CellUi.html#method-i-normal","()",""],["onClick","Button","Button.html#method-i-onClick","(block=nil)","<p>Presentation\n<p>The onClick method determins how a button acts when it is clicked or hovered.\n<p>Attributes\n"],["onClick","Text","Text.html#method-i-onClick","(block=nil)",""],["onConfigureEventSignal","HelpUi","HelpUi.html#method-i-onConfigureEventSignal","(da)",""],["onDestroy","Probleme","Probleme.html#method-i-onDestroy","()",""],["onDestroy","ProblemeIdent","ProblemeIdent.html#method-i-onDestroy","()",""],["onDrawSignal","HelpUi","HelpUi.html#method-i-onDrawSignal","(cr)",""],["outOfBound","CellUi","CellUi.html#method-i-outOfBound","()",""],["parce","ChronoUi","ChronoUi.html#method-i-parce","(time)","<p>Presentation\n<p>The parce method is needed for the initialization and for the label update. It gives the …\n"],["partOfAdventure?","Session","Session.html#method-i-partOfAdventure-3F","()",""],["playerConnect","ConnectDB","ConnectDB.html#method-i-playerConnect","(name, password)","<p>This method tries to find the player in the database with the name and the password provided. The game …\n"],["playerUpdate","ConnectDB","ConnectDB.html#method-i-playerUpdate","(login, mdp)","<p>Presentation\n<p>This method is used when the player wants to update his/her password. When the player can&#39;t …\n"],["previousImage","Diapo","Diapo.html#method-i-previousImage","()",""],["price","Help","Help.html#method-i-price","(helpLevel)","<p>This method checks the price of a given help level.\n<p>Returns\n\n<pre class=\"ruby\"><span class=\"ruby-ivar\">@price</span> <span class=\"ruby-operator\">*</span> <span class=\"ruby-identifier\">helpLevel</span>\n</pre>\n"],["primaryChange","Cell","Cell.html#method-i-primaryChange","()","<p>The primaryChange method is a boolean method returning false if the cell is frozen. This method changes …\n"],["primaryUnchange","Cell","Cell.html#method-i-primaryUnchange","()","<p>The primaryUnchange method uses the same system as the primaryChange method but is used in the case of …\n"],["realLast","GridUi","GridUi.html#method-i-realLast","()","<p>Compute the real last cell of the selection @return CellUi\n"],["recive","LoadingScreen","LoadingScreen.html#method-i-recive","(s=@textManager.getLoadingMessages(\"loading\"))",""],["recive","ProcessStatus","ProcessStatus.html#method-i-recive","()",""],["redo","Game","Game.html#method-i-redo","()",""],["redo","GridUi","GridUi.html#method-i-redo","()",""],["redo","Guess","Guess.html#method-i-redo","()","<p>Redo the last Move did in this Guess\n"],["redo","Moves","Moves.html#method-i-redo","()","<p>Redoes the last undo move (i.e replay it on the given game) and pushes it on the undo stack.\n<p><strong>Arguments</strong> …\n"],["refresh","GridUi","GridUi.html#method-i-refresh","()",""],["refresh","LevelNumber","LevelNumber.html#method-i-refresh","(i,manager,adventure,adventureInfo)","<p>Presentation\n<p>This method is used to refresh the level icon. An icon contain a level number icon from the …\n"],["refresh","LevelNumbers","LevelNumbers.html#method-i-refresh","(manager,adventure ,adventureInfo)","<p>Presentation\n<p>This method is used to refresh all the levels icons by calling the class levelNumber\n<p>Attributes …\n"],["refresh","Star","Star.html#method-i-refresh","(nbEtoile,nbEtoileObtenu)","\n<pre>===== Presentation\nThis method is used to refresh all the star&#39;s icons.\n===== Attributes\n*+nbEtoile+: ...</pre>\n"],["refreshOverAllStar","LevelSelectionScreen","LevelSelectionScreen.html#method-i-refreshOverAllStar","()","<p>Presentation\n<p>This method is used to refresh star&#39;s icons\n<p>Return\n"],["removeGuess","Game","Game.html#method-i-removeGuess","()",""],["replay","AdventureSession","AdventureSession.html#method-i-replay","(none)","<p>Presentation\n<p>This class has no reason to have a replay. Overwriting this method with nothing allows less …\n"],["replay","Moves","Moves.html#method-i-replay","(game)","<p>Replays each move on the given Game.\n<p><strong>Arguments</strong> :\n<p><code>game</code> -&gt; the Game to replay on.\n"],["replay","Session","Session.html#method-i-replay","(continue)",""],["require_all","Object","Object.html#method-i-require_all","(_dir)","<p>@Author: VAIDIE Camille &lt;CamilleVAIDIE&gt; @Date:   8-Mar-2019 @Email:  camille.vaidie.etu@univ-lemans.fr …\n"],["research","AllTreesHaveTentsHelper","AllTreesHaveTentsHelper.html#method-i-research","(cell, prevCell)",""],["resetGrid","Game","Game.html#method-i-resetGrid","()",""],["resize","Asset","Asset.html#method-i-resize","(width,height)","<p>Presentation\n<p>The resize method modifies the buffer to make it fit a certain size.\n<p>Attributes\n"],["resize","CellAsset","CellAsset.html#method-i-resize","()",""],["root?","Guess","Guess.html#method-i-root-3F","()",""],["run","Game","Game.html#method-i-run","()",""],["run","LoadingScreen","LoadingScreen.html#method-i-run","()",""],["run","UiManager","UiManager.html#method-i-run","()",""],["runAdventureSession","UiManager","UiManager.html#method-i-runAdventureSession","(session)",""],["runGameSession","UiManager","UiManager.html#method-i-runGameSession","(session,partOfAdventure=false)",""],["runGameSessionFromSave","UiManager","UiManager.html#method-i-runGameSessionFromSave","(save)",""],["sameState?","CellUi","CellUi.html#method-i-sameState-3F","(cell)",""],["select","CellUi","CellUi.html#method-i-select","()",""],["select","SelectionUi","SelectionUi.html#method-i-select","(arr)",""],["selection","GridUi","GridUi.html#method-i-selection","(cell)","<p>Draws a visual selection for the user\n"],["send","ProcessStatus","ProcessStatus.html#method-c-send","(message)",""],["setBackground","Text","Text.html#method-i-setBackground","(r,g,b,a)",""],["setSave","Session","Session.html#method-i-setSave","(save)",""],["setTime","QuickPlaySession","QuickPlaySession.html#method-i-setTime","()",""],["setTime","Session","Session.html#method-i-setTime","()",""],["setTime","TimeAttackSession","TimeAttackSession.html#method-i-setTime","()",""],["setTime","TutorialSession","TutorialSession.html#method-i-setTime","()",""],["setWrap","Text","Text.html#method-i-setWrap","(bool)",""],["show","CellUi","CellUi.html#method-i-show","()",""],["show","SelectionUi","SelectionUi.html#method-i-show","()",""],["text","LoadingScreen","LoadingScreen.html#method-i-text","(s=@textManager.getLoadingMessages(\"loading\"))",""],["title","Text","Text.html#method-i-title","()",""],["to_s","Help","Help.html#method-i-to_s","()","<p>This method a redefinition of the to_s method, used to print the help text.\n<p>Returns\n<p>Returns the @helpText …\n"],["toogleCountIndicators","GridUi","GridUi.html#method-i-toogleCountIndicators","()",""],["toogleTracer","GridUi","GridUi.html#method-i-toogleTracer","()",""],["tracerActive?","GridUi","GridUi.html#method-i-tracerActive-3F","()",""],["unLeftClicked","CellUi","CellUi.html#method-i-unLeftClicked","()",""],["undo","Game","Game.html#method-i-undo","()",""],["undo","GridUi","GridUi.html#method-i-undo","()",""],["undo","Guess","Guess.html#method-i-undo","()","<p>Undo the last Move did in this Guess\n"],["undo","Moves","Moves.html#method-i-undo","()","<p>Undoes the last move (i.e replay it on the given game) and pushes it on the redo stack.\n<p><strong>Arguments</strong> :\n<p><code>game</code> …\n"],["unselect","CellUi","CellUi.html#method-i-unselect","()",""],["unselect","SelectionUi","SelectionUi.html#method-i-unselect","(arr)",""],["update","ClueUi","ClueUi.html#method-i-update","()",""],["update","GameScreen","GameScreen.html#method-i-update","()",""],["update","HelpUi","HelpUi.html#method-i-update","(message=\"\")",""],["update","Save","Save.html#method-c-update","(session)",""],["update","SelectionUi","SelectionUi.html#method-i-update","(newSelection)",""],["update","UiManager","UiManager.html#method-i-update","()",""],["updateHighScore","ConnectDB","ConnectDB.html#method-i-updateHighScore","(gameMode, difficulty, player, score)","<p>Presentation\n<p>When the player has already done a high score in the given game mode and difficulty this …\n"],["updateHighScore","UiManager","UiManager.html#method-i-updateHighScore","()",""],["updateLabel","Button","Button.html#method-i-updateLabel","(newLabel)","<p>Presentation\n<p>The updateLabel method updates the button label with the new value taken in parameters.\n<p>Attributes …\n"],["updateLabel","ChronoUi","ChronoUi.html#method-i-updateLabel","(time)","<p>Presentation\n<p>The updateLabel method updates the chronometer button&#39;s label in order to actualize it …\n"],["updateLabel","Text","Text.html#method-i-updateLabel","(newLabel)",""],["updateOverallStarsHash","AdventureSession","AdventureSession.html#method-i-updateOverallStarsHash","()","<p>Presentation\n<p>This method is used when the player ends a game. This is used to update the overAllStarsHash …\n"],["updateSave","ConnectDB","ConnectDB.html#method-i-updateSave","(content, id)","<p>Presentation\n<p>The updateSave method updates the current player&#39;s save in order to keep his/her progression …\n"],["updateSave","Session","Session.html#method-i-updateSave","()",""],["updateSave","UiManager","UiManager.html#method-i-updateSave","()",""]]}}